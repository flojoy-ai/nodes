{
  "description": "Inputs\n------\ndefault: None",
  "parameters": [
    {
      "name": "s3_name",
      "type": "str",
      "description": "name of the key that the user used to save the access and secret access keys"
    },
    {
      "name": "bucket_name",
      "type": "str",
      "description": "Amazon S3 bucket name that they are trying to access"
    },
    {
      "name": "file_name",
      "type": "str",
      "description": "name of the file that they want to extract"
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "DataFrame",
      "description": "DataFrame loaded from file in the specfied bucket"
    }
  ],
  "code": "import pandas as pd\nimport io\nimport boto3\nimport keyring\nfrom flojoy import flojoy, DataFrame\n\n\n@flojoy\ndef READ_S3(\n    s3_name: str = \"\",\n    bucket_name: str = \"\",\n    file_name: str = \"\",\n) -> DataFrame:\n    \"\"\"The READ_S3 node takes a S3_key name, S3 bucket name, and file name as input, and extracts the file from the specified bucket using the S3_key that was saved.\n\n    Inputs\n    ------\n    default: None\n\n    Parameters\n    ----------\n    s3_name : str\n        name of the key that the user used to save the access and secret access keys\n    bucket_name : str\n        Amazon S3 bucket name that they are trying to access\n    file_name : str\n        name of the file that they want to extract\n\n    Returns\n    -------\n    DataFrame\n        DataFrame loaded from file in the specfied bucket\n\n    \"\"\"\n\n    if s3_name == \"\":\n        raise ValueError(\"Provide a name that was used to set AWS S3 key\")\n\n    try:\n        accessKey = keyring.get_password(\"system\", f\"{s3_name}_ACCESSKEY\")\n        secretKey = keyring.get_password(\"system\", f\"{s3_name}_SECRETKEY\")\n        s3 = boto3.resource(\n            \"s3\", aws_access_key_id=accessKey, aws_secret_access_key=secretKey\n        )\n        object = s3.Object(bucket_name, file_name)\n        buffer = io.BytesIO()\n        object.download_fileobj(buffer)\n        df = pd.read_parquet(buffer)\n\n        return DataFrame(df=df)\n\n    except Exception as e:\n        print(e)\n"
}