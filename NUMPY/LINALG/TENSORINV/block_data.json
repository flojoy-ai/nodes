{
  "description": "The description of that function is as follows:\n\n    Compute the 'inverse' of an N-dimensional array.\n\n    The result is an inverse for 'a' relative to the tensordot operation \"tensordot(a, b, ind)\",\n    i.e. up to floating-point accuracy, \"tensordot(tensorinv(a), a, ind)\" is the \"identity\" tensor for the tensordot operation.",
  "parameters": [
    {
      "name": "a",
      "type": "array_like",
      "description": "Tensor to 'invert'.\nIts shape must be 'square', i.e. \"prod(a.shape[:ind]) == prod(a.shape[ind:])\"."
    },
    {
      "name": "ind",
      "type": "int",
      "description": "Number of first indices that are involved in the inverse sum.\nMust be a positive integer, default is 2."
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "DataContainer",
      "description": "type 'ordered pair', 'scalar', or 'matrix'"
    }
  ],
  "code": "from flojoy import flojoy, Matrix, Scalar\nimport numpy as np\nfrom collections import namedtuple\nfrom typing import Literal\n\nimport numpy.linalg\n\n\n@flojoy\ndef TENSORINV(\n    default: Matrix,\n    ind: int = 2,\n) -> Matrix | Scalar:\n    \"\"\"The TENSORINV node is based on a numpy or scipy function.\n\n    The description of that function is as follows:\n\n        Compute the 'inverse' of an N-dimensional array.\n\n        The result is an inverse for 'a' relative to the tensordot operation \"tensordot(a, b, ind)\",\n        i.e. up to floating-point accuracy, \"tensordot(tensorinv(a), a, ind)\" is the \"identity\" tensor for the tensordot operation.\n\n    Parameters\n    ----------\n    a : array_like\n        Tensor to 'invert'.\n        Its shape must be 'square', i.e. \"prod(a.shape[:ind]) == prod(a.shape[ind:])\".\n    ind : int, optional\n        Number of first indices that are involved in the inverse sum.\n        Must be a positive integer, default is 2.\n\n    Returns\n    -------\n    DataContainer\n        type 'ordered pair', 'scalar', or 'matrix'\n    \"\"\"\n\n    result = numpy.linalg.tensorinv(\n        a=default.m,\n        ind=ind,\n    )\n\n    if isinstance(result, np.ndarray):\n        result = Matrix(m=result)\n    else:\n        assert isinstance(\n            result, np.number | float | int\n        ), f\"Expected np.number, float or int for result, got {type(result)}\"\n        result = Scalar(c=float(result))\n\n    return result\n"
}