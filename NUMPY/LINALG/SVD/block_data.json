{
  "description": "The description of that function is as follows:\n\n    Singular Value Decomposition.\n\n    When 'a' is a 2D array, and \"full_matrices=False\", then it is factorized as \"u @ np.diag(s) @ vh = (u * s) @ vh\",\n    where 'u' and the Hermitian transpose of 'vh' are 2D arrays with orthonormal columns and 's' is a 1D array of 'a' singular values.\n\n    When 'a' is higher-dimensional, SVD is applied in stacked mode as explained below.",
  "parameters": [
    {
      "name": "select_return",
      "type": "'u', 's', 'vh'",
      "description": "Select the desired object to return.\nSee the respective function docs for descriptors."
    },
    {
      "name": "a",
      "type": "(..., M, N) array_like",
      "description": "A real or complex array with \"a.ndim >= 2\"."
    },
    {
      "name": "full_matrices",
      "type": "bool",
      "description": "If True (default), 'u' and 'vh' have the shapes \"(..., M, M)\" and \"(..., N, N)\", respectively.\nOtherwise, the shapes are \"(..., M, K)\" and \"(..., K, N)\", respectively, where \"K = min(M, N)\"."
    },
    {
      "name": "compute_uv",
      "type": "bool",
      "description": "Whether or not to compute 'u' and 'vh' in addition to 's'.\nTrue by default."
    },
    {
      "name": "hermitian",
      "type": "bool",
      "description": "If True, 'a' is assumed to be Hermitian (symmetric if real-valued), enabling a more efficient method for finding singular values.\nDefaults to False."
    },
    {
      "name": ".. versionadded",
      "type": ": 1.17.0",
      "description": null
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "DataContainer",
      "description": "type 'ordered pair', 'scalar', or 'matrix'"
    }
  ],
  "code": "from flojoy import flojoy, Matrix, Scalar\nimport numpy as np\nfrom collections import namedtuple\nfrom typing import Literal\n\nimport numpy.linalg\n\n\n@flojoy\ndef SVD(\n    default: Matrix,\n    full_matrices: bool = True,\n    compute_uv: bool = True,\n    hermitian: bool = False,\n    select_return: Literal[\"u\", \"s\", \"vh\"] = \"u\",\n) -> Matrix | Scalar:\n    \"\"\"The SVD node is based on a numpy or scipy function.\n\n    The description of that function is as follows:\n\n        Singular Value Decomposition.\n\n        When 'a' is a 2D array, and \"full_matrices=False\", then it is factorized as \"u @ np.diag(s) @ vh = (u * s) @ vh\",\n        where 'u' and the Hermitian transpose of 'vh' are 2D arrays with orthonormal columns and 's' is a 1D array of 'a' singular values.\n\n        When 'a' is higher-dimensional, SVD is applied in stacked mode as explained below.\n\n    Parameters\n    ----------\n    select_return : 'u', 's', 'vh'\n        Select the desired object to return.\n        See the respective function docs for descriptors.\n    a : (..., M, N) array_like\n        A real or complex array with \"a.ndim >= 2\".\n    full_matrices : bool, optional\n        If True (default), 'u' and 'vh' have the shapes \"(..., M, M)\" and \"(..., N, N)\", respectively.\n        Otherwise, the shapes are \"(..., M, K)\" and \"(..., K, N)\", respectively, where \"K = min(M, N)\".\n    compute_uv : bool, optional\n        Whether or not to compute 'u' and 'vh' in addition to 's'.\n        True by default.\n    hermitian : bool, optional\n        If True, 'a' is assumed to be Hermitian (symmetric if real-valued), enabling a more efficient method for finding singular values.\n        Defaults to False.\n\n    .. versionadded:: 1.17.0\n\n    Returns\n    -------\n    DataContainer\n        type 'ordered pair', 'scalar', or 'matrix'\n    \"\"\"\n\n    result = numpy.linalg.svd(\n        a=default.m,\n        full_matrices=full_matrices,\n        compute_uv=compute_uv,\n        hermitian=hermitian,\n    )\n\n    return_list = [\"u\", \"s\", \"vh\"]\n    if isinstance(result, tuple):\n        res_dict = {}\n        num = min(len(result), len(return_list))\n        for i in range(num):\n            res_dict[return_list[i]] = result[i]\n        result = res_dict[select_return]\n    else:\n        result = result._asdict()\n        result = result[select_return]\n\n    if isinstance(result, np.ndarray):\n        result = Matrix(m=result)\n    else:\n        assert isinstance(\n            result, np.number | float | int\n        ), f\"Expected np.number, float or int for result, got {type(result)}\"\n        result = Scalar(c=float(result))\n\n    return result\n"
}