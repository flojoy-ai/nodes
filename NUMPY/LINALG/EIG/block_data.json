{
  "description": "The description of that function is as follows:\n\n    Compute the eigenvalues and right eigenvectors of a square array.",
  "parameters": [
    {
      "name": "select_return",
      "type": "'w', 'v'",
      "description": "Select the desired object to return.\nSee the respective function docs for descriptors."
    },
    {
      "name": "a",
      "type": "(..., M, M) array",
      "description": "Matrices for which the eigenvalues and right eigenvectors will be computed."
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "DataContainer",
      "description": "type 'ordered pair', 'scalar', or 'matrix'"
    }
  ],
  "code": "from flojoy import flojoy, Matrix, Scalar\nimport numpy as np\nfrom collections import namedtuple\nfrom typing import Literal\n\nimport numpy.linalg\n\n\n@flojoy\ndef EIG(\n    default: Matrix,\n    select_return: Literal[\"w\", \"v\"] = \"w\",\n) -> Matrix | Scalar:\n    \"\"\"The EIG node is based on a numpy or scipy function.\n\n    The description of that function is as follows:\n\n        Compute the eigenvalues and right eigenvectors of a square array.\n\n    Parameters\n    ----------\n    select_return : 'w', 'v'\n        Select the desired object to return.\n        See the respective function docs for descriptors.\n    a : (..., M, M) array\n        Matrices for which the eigenvalues and right eigenvectors will be computed.\n\n    Returns\n    -------\n    DataContainer\n        type 'ordered pair', 'scalar', or 'matrix'\n    \"\"\"\n\n    result = numpy.linalg.eig(\n        a=default.m,\n    )\n\n    return_list = [\"w\", \"v\"]\n    if isinstance(result, tuple):\n        res_dict = {}\n        num = min(len(result), len(return_list))\n        for i in range(num):\n            res_dict[return_list[i]] = result[i]\n        result = res_dict[select_return]\n    else:\n        result = result._asdict()\n        result = result[select_return]\n\n    if isinstance(result, np.ndarray):\n        result = Matrix(m=result)\n    else:\n        assert isinstance(\n            result, np.number | float | int\n        ), f\"Expected np.number, float or int for result, got {type(result)}\"\n        result = Scalar(c=float(result))\n\n    return result\n"
}