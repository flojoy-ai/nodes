{
  "description": "The description of that function is as follows:\n\n    Raise a square matrix to the (integer) power 'n'.\n\n    For positive integers 'n', the power is computed by repeated matrix squarings and matrix multiplications.\n\n    If \"n == 0\", the identity matrix of the same shape as M is returned. If \"n < 0\", the inverse is computed and then raised to \"abs(n)\".\n\nNote: Stacks of object matrices are not currently supported.",
  "parameters": [
    {
      "name": "a",
      "type": "(..., M, M) array_like",
      "description": "Matrix to be \"powered\"."
    },
    {
      "name": "n",
      "type": "int",
      "description": "The exponent can be any integer or long integer, positive, negative, or zero."
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "DataContainer",
      "description": "type 'ordered pair', 'scalar', or 'matrix'"
    }
  ],
  "code": "from flojoy import flojoy, Matrix, Scalar\nimport numpy as np\nfrom collections import namedtuple\nfrom typing import Literal\n\nimport numpy.linalg\n\n\n@flojoy\ndef MATRIX_POWER(\n    default: Matrix,\n    n: int = 2,\n) -> Matrix | Scalar:\n    \"\"\"The MATRIX_POWER node is based on a numpy or scipy function.\n\n    The description of that function is as follows:\n\n        Raise a square matrix to the (integer) power 'n'.\n\n        For positive integers 'n', the power is computed by repeated matrix squarings and matrix multiplications.\n\n        If \"n == 0\", the identity matrix of the same shape as M is returned. If \"n < 0\", the inverse is computed and then raised to \"abs(n)\".\n\n    Note: Stacks of object matrices are not currently supported.\n\n    Parameters\n    ----------\n    a : (..., M, M) array_like\n            Matrix to be \"powered\".\n    n : int\n            The exponent can be any integer or long integer, positive, negative, or zero.\n\n    Returns\n    -------\n    DataContainer\n        type 'ordered pair', 'scalar', or 'matrix'\n    \"\"\"\n\n    result = numpy.linalg.matrix_power(\n        a=default.m,\n        n=n,\n    )\n\n    if isinstance(result, np.ndarray):\n        result = Matrix(m=result)\n    else:\n        assert isinstance(\n            result, np.number | float | int\n        ), f\"Expected np.number, float or int for result, got {type(result)}\"\n        result = Scalar(c=float(result))\n\n    return result\n"
}