{
  "description": "The description of that function is as follows:\n\n    Slice off a proportion from ONE end of the passed array distribution.\n\n    If 'proportiontocut' = 0.1, slices off 'leftmost' or 'rightmost' 10% of scores.\n    The lowest or highest values are trimmed (depending on the tail).\n    Slice off less if proportion results in a non-integer slice index (i.e. conservatively slices off 'proportiontocut').",
  "parameters": [
    {
      "name": "a",
      "type": "array_like",
      "description": "Input array."
    },
    {
      "name": "proportiontocut",
      "type": "float",
      "description": "Fraction to cut off of 'left' or 'right' of distribution."
    },
    {
      "name": "tail",
      "type": "{'left', 'right'}",
      "description": "Defaults to 'right'."
    },
    {
      "name": "axis",
      "type": "int or None",
      "description": "Axis along which to trim data.\nDefault is 0.\nIf None, compute over the whole array 'a'."
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "DataContainer",
      "description": "type 'ordered pair', 'scalar', or 'matrix'"
    }
  ],
  "code": "from flojoy import OrderedPair, flojoy, Matrix, Scalar\nimport numpy as np\nfrom collections import namedtuple\nfrom typing import Literal\n\nimport scipy.stats\n\n\n@flojoy\ndef TRIM1(\n    default: OrderedPair | Matrix,\n    proportiontocut: float = 0.1,\n    tail: str = \"right\",\n    axis: int = 0,\n) -> OrderedPair | Matrix | Scalar:\n    \"\"\"The TRIM1 node is based on a numpy or scipy function.\n\n    The description of that function is as follows:\n\n        Slice off a proportion from ONE end of the passed array distribution.\n\n        If 'proportiontocut' = 0.1, slices off 'leftmost' or 'rightmost' 10% of scores.\n        The lowest or highest values are trimmed (depending on the tail).\n        Slice off less if proportion results in a non-integer slice index (i.e. conservatively slices off 'proportiontocut').\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    proportiontocut : float\n        Fraction to cut off of 'left' or 'right' of distribution.\n    tail : {'left', 'right'}, optional\n        Defaults to 'right'.\n    axis : int or None, optional\n        Axis along which to trim data.\n        Default is 0.\n        If None, compute over the whole array 'a'.\n\n    Returns\n    -------\n    DataContainer\n        type 'ordered pair', 'scalar', or 'matrix'\n    \"\"\"\n\n    result = scipy.stats.trim1(\n        a=default.y,\n        proportiontocut=proportiontocut,\n        tail=tail,\n        axis=axis,\n    )\n\n    if isinstance(result, np.ndarray):\n        result = OrderedPair(x=default.x, y=result)\n    else:\n        assert isinstance(\n            result, np.number | float | int\n        ), f\"Expected np.number, float or int for result, got {type(result)}\"\n        result = Scalar(c=float(result))\n\n    return result\n"
}