{
  "description": "The description of that function is as follows:\n\n    Test whether a dataset has normal kurtosis.\n\n    This function tests the null hypothesis that the kurtosis of the population from which the sample was drawn is that of the normal distribution.",
  "parameters": [
    {
      "name": "select_return",
      "type": "This function has returns multiple objects ['statistic', 'pvalue'].",
      "description": "Select the desired one to return.\nSee the respective function docs for descriptors."
    },
    {
      "name": "a",
      "type": "array",
      "description": "Array of the sample data."
    },
    {
      "name": "axis",
      "type": "int or None",
      "description": "Axis along which to compute test. Default is 0.\nIf None, compute over the whole array 'a'."
    },
    {
      "name": "nan_policy",
      "type": "{'propagate', 'raise', 'omit'}",
      "description": "Defines how to handle when input contains nan.\nThe following options are available (default is 'propagate'):\n'propagate' : returns nan\n'raise' : throws an error\n'omit' : performs the calculations ignoring nan values"
    },
    {
      "name": "alternative",
      "type": "{'two-sided', 'less', 'greater'}",
      "description": "Defines the alternative hypothesis.\nThe following options are available (default is 'two-sided'):\n'two-sided' : the kurtosis of the distribution underlying the sample is different from that of the normal distribution\n'less' : the kurtosis of the distribution underlying the sample is less than that of the normal distribution\n'greater' : the kurtosis of the distribution underlying the sample is greater than that of the normal distribution"
    },
    {
      "name": ".. versionadded",
      "type": ": 1.7.0",
      "description": null
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "DataContainer",
      "description": "type 'ordered pair', 'scalar', or 'matrix'"
    }
  ],
  "code": "from flojoy import OrderedPair, flojoy, Matrix, Scalar\nimport numpy as np\nfrom collections import namedtuple\nfrom typing import Literal\n\nimport scipy.stats\n\n\n@flojoy\ndef KURTOSISTEST(\n    default: OrderedPair | Matrix,\n    axis: int = 0,\n    nan_policy: str = \"propagate\",\n    alternative: str = \"two-sided\",\n    select_return: Literal[\"statistic\", \"pvalue\"] = \"statistic\",\n) -> OrderedPair | Matrix | Scalar:\n    \"\"\"The KURTOSISTEST node is based on a numpy or scipy function.\n\n    The description of that function is as follows:\n\n        Test whether a dataset has normal kurtosis.\n\n        This function tests the null hypothesis that the kurtosis of the population from which the sample was drawn is that of the normal distribution.\n\n    Parameters\n    ----------\n    select_return : This function has returns multiple objects ['statistic', 'pvalue'].\n        Select the desired one to return.\n        See the respective function docs for descriptors.\n    a : array\n        Array of the sample data.\n    axis : int or None, optional\n        Axis along which to compute test. Default is 0.\n        If None, compute over the whole array 'a'.\n    nan_policy : {'propagate', 'raise', 'omit'}, optional\n        Defines how to handle when input contains nan.\n        The following options are available (default is 'propagate'):\n        'propagate' : returns nan\n        'raise' : throws an error\n        'omit' : performs the calculations ignoring nan values\n    alternative : {'two-sided', 'less', 'greater'}, optional\n        Defines the alternative hypothesis.\n        The following options are available (default is 'two-sided'):\n        'two-sided' : the kurtosis of the distribution underlying the sample is different from that of the normal distribution\n        'less' : the kurtosis of the distribution underlying the sample is less than that of the normal distribution\n        'greater' : the kurtosis of the distribution underlying the sample is greater than that of the normal distribution\n\n    .. versionadded:: 1.7.0\n\n    Returns\n    -------\n    DataContainer\n        type 'ordered pair', 'scalar', or 'matrix'\n    \"\"\"\n\n    result = scipy.stats.kurtosistest(\n        a=default.y,\n        axis=axis,\n        nan_policy=nan_policy,\n        alternative=alternative,\n    )\n\n    return_list = [\"statistic\", \"pvalue\"]\n    if isinstance(result, tuple):\n        res_dict = {}\n        num = min(len(result), len(return_list))\n        for i in range(num):\n            res_dict[return_list[i]] = result[i]\n        result = res_dict[select_return]\n    else:\n        result = result._asdict()\n        result = result[select_return]\n\n    if isinstance(result, np.ndarray):\n        result = OrderedPair(x=default.x, y=result)\n    else:\n        assert isinstance(\n            result, np.number | float | int\n        ), f\"Expected np.number, float or int for result, got {type(result)}\"\n        result = Scalar(c=float(result))\n\n    return result\n"
}