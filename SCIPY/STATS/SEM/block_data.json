{
  "description": "The description of that function is as follows:\n\n    Compute the standard error of the mean.\n\n    Calculate the standard error of the mean (or standard error of measurement) of the values in the input array.",
  "parameters": [
    {
      "name": "a",
      "type": "array_like",
      "description": "An array containing the values for which the standard error is returned."
    },
    {
      "name": "axis",
      "type": "int or None",
      "description": "Axis along which to operate.\nDefault is 0.\nIf None, compute over the whole array 'a'."
    },
    {
      "name": "ddof",
      "type": "int",
      "description": "Delta degrees-of-freedom. How many degrees of freedom to adjust\nfor bias in limited samples relative to the population estimate of variance.\nDefaults to 1."
    },
    {
      "name": "nan_policy",
      "type": "{'propagate', 'raise', 'omit'}",
      "description": "Defines how to handle when input contains nan.\nThe following options are available (default is 'propagate'):\n'propagate' : returns nan\n'raise' : raises an error\n'omit' : performs the calculations ignoring nan values"
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "DataContainer",
      "description": "type 'ordered pair', 'scalar', or 'matrix'"
    }
  ],
  "code": "from flojoy import OrderedPair, flojoy, Matrix, Scalar\nimport numpy as np\nfrom collections import namedtuple\nfrom typing import Literal\n\nimport scipy.stats\n\n\n@flojoy\ndef SEM(\n    default: OrderedPair | Matrix,\n    axis: int = 0,\n    ddof: int = 1,\n    nan_policy: str = \"propagate\",\n) -> OrderedPair | Matrix | Scalar:\n    \"\"\"The SEM node is based on a numpy or scipy function.\n\n    The description of that function is as follows:\n\n        Compute the standard error of the mean.\n\n        Calculate the standard error of the mean (or standard error of measurement) of the values in the input array.\n\n    Parameters\n    ----------\n    a : array_like\n        An array containing the values for which the standard error is returned.\n    axis : int or None, optional\n        Axis along which to operate.\n        Default is 0.\n        If None, compute over the whole array 'a'.\n    ddof : int, optional\n        Delta degrees-of-freedom. How many degrees of freedom to adjust\n        for bias in limited samples relative to the population estimate of variance.\n        Defaults to 1.\n    nan_policy : {'propagate', 'raise', 'omit'}, optional\n        Defines how to handle when input contains nan.\n        The following options are available (default is 'propagate'):\n        'propagate' : returns nan\n        'raise' : raises an error\n        'omit' : performs the calculations ignoring nan values\n\n    Returns\n    -------\n    DataContainer\n        type 'ordered pair', 'scalar', or 'matrix'\n    \"\"\"\n\n    result = scipy.stats.sem(\n        a=default.y,\n        axis=axis,\n        ddof=ddof,\n        nan_policy=nan_policy,\n    )\n\n    if isinstance(result, np.ndarray):\n        result = OrderedPair(x=default.x, y=result)\n    else:\n        assert isinstance(\n            result, np.number | float | int\n        ), f\"Expected np.number, float or int for result, got {type(result)}\"\n        result = Scalar(c=float(result))\n\n    return result\n"
}