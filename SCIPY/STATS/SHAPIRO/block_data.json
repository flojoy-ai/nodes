{
  "description": "The description of that function is as follows:\n\n    Perform the Shapiro-Wilk test for normality.\n\n    The Shapiro-Wilk test tests the null hypothesis that the data was drawn from a normal distribution.",
  "parameters": [
    {
      "name": "select_return",
      "type": "'statistic', 'p-value'",
      "description": "Select the desired object to return.\nSee the respective function docs for descriptors."
    },
    {
      "name": "x",
      "type": "array_like",
      "description": "Array of sample data."
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "DataContainer",
      "description": "type 'ordered pair', 'scalar', or 'matrix'"
    }
  ],
  "code": "from flojoy import OrderedPair, flojoy, Matrix, Scalar\nimport numpy as np\nfrom collections import namedtuple\nfrom typing import Literal\n\nimport scipy.stats\n\n\n@flojoy\ndef SHAPIRO(\n    default: OrderedPair | Matrix,\n    select_return: Literal[\"statistic\", \"p-value\"] = \"statistic\",\n) -> OrderedPair | Matrix | Scalar:\n    \"\"\"The SHAPIRO node is based on a numpy or scipy function.\n\n    The description of that function is as follows:\n\n        Perform the Shapiro-Wilk test for normality.\n\n        The Shapiro-Wilk test tests the null hypothesis that the data was drawn from a normal distribution.\n\n    Parameters\n    ----------\n    select_return : 'statistic', 'p-value'\n        Select the desired object to return.\n        See the respective function docs for descriptors.\n    x : array_like\n        Array of sample data.\n\n    Returns\n    -------\n    DataContainer\n        type 'ordered pair', 'scalar', or 'matrix'\n    \"\"\"\n\n    result = scipy.stats.shapiro(\n        x=default.y,\n    )\n\n    return_list = [\"statistic\", \"p-value\"]\n    if isinstance(result, tuple):\n        res_dict = {}\n        num = min(len(result), len(return_list))\n        for i in range(num):\n            res_dict[return_list[i]] = result[i]\n        result = res_dict[select_return]\n    else:\n        result = result._asdict()\n        result = result[select_return]\n\n    if isinstance(result, np.ndarray):\n        result = OrderedPair(x=default.x, y=result)\n    else:\n        assert isinstance(\n            result, np.number | float | int\n        ), f\"Expected np.number, float or int for result, got {type(result)}\"\n        result = Scalar(c=float(result))\n\n    return result\n"
}