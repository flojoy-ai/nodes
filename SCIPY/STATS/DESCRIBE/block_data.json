{
  "description": "The description of that function is as follows:\n\n    Compute several descriptive statistics of the passed array.",
  "parameters": [
    {
      "name": "select_return",
      "type": "This function has returns multiple objects ['nobs', 'mean', 'variance', 'skewness', 'kurtosis'].",
      "description": "Select the desired one to return.\nSee the respective function docs for descriptors."
    },
    {
      "name": "a",
      "type": "array_like",
      "description": "Input data."
    },
    {
      "name": "axis",
      "type": "int or None",
      "description": "Axis along which statistics are calculated. Default is 0.\nIf None, compute over the whole array 'a'."
    },
    {
      "name": "ddof",
      "type": "int",
      "description": "Delta degrees of freedom (only for variance). Default is 1."
    },
    {
      "name": "bias",
      "type": "bool",
      "description": "If False, then the skewness and kurtosis calculations are corrected for statistical bias."
    },
    {
      "name": "nan_policy",
      "type": "{'propagate', 'raise', 'omit'}",
      "description": "Defines how to handle when input contains nan.\nThe following options are available (default is 'propagate'):\n'propagate': returns nan\n'raise': throws an error\n'omit': performs the calculations ignoring nan values"
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "DataContainer",
      "description": "type 'ordered pair', 'scalar', or 'matrix'"
    }
  ],
  "code": "from flojoy import OrderedPair, flojoy, Matrix, Scalar\nimport numpy as np\nfrom collections import namedtuple\nfrom typing import Literal\n\nimport scipy.stats\n\n\n@flojoy\ndef DESCRIBE(\n    default: OrderedPair | Matrix,\n    axis: int = 0,\n    ddof: int = 1,\n    bias: bool = True,\n    nan_policy: str = \"propagate\",\n    select_return: Literal[\"nobs\", \"mean\", \"variance\", \"skewness\", \"kurtosis\"] = \"nobs\",\n) -> OrderedPair | Matrix | Scalar:\n    \"\"\"The DESCRIBE node is based on a numpy or scipy function.\n\n    The description of that function is as follows:\n\n        Compute several descriptive statistics of the passed array.\n\n    Parameters\n    ----------\n    select_return : This function has returns multiple objects ['nobs', 'mean', 'variance', 'skewness', 'kurtosis'].\n        Select the desired one to return.\n        See the respective function docs for descriptors.\n    a : array_like\n        Input data.\n    axis : int or None, optional\n        Axis along which statistics are calculated. Default is 0.\n        If None, compute over the whole array 'a'.\n    ddof : int, optional\n        Delta degrees of freedom (only for variance). Default is 1.\n    bias : bool, optional\n        If False, then the skewness and kurtosis calculations are corrected for statistical bias.\n    nan_policy : {'propagate', 'raise', 'omit'}, optional\n        Defines how to handle when input contains nan.\n        The following options are available (default is 'propagate'):\n        'propagate': returns nan\n        'raise': throws an error\n        'omit': performs the calculations ignoring nan values\n\n    Returns\n    -------\n    DataContainer\n        type 'ordered pair', 'scalar', or 'matrix'\n    \"\"\"\n\n    result = scipy.stats.describe(\n        a=default.y,\n        axis=axis,\n        ddof=ddof,\n        bias=bias,\n        nan_policy=nan_policy,\n    )\n\n    return_list = [\"nobs\", \"mean\", \"variance\", \"skewness\", \"kurtosis\"]\n    if isinstance(result, tuple):\n        res_dict = {}\n        num = min(len(result), len(return_list))\n        for i in range(num):\n            res_dict[return_list[i]] = result[i]\n        result = res_dict[select_return]\n    else:\n        result = result._asdict()\n        result = result[select_return]\n\n    if isinstance(result, np.ndarray):\n        result = OrderedPair(x=default.x, y=result)\n    else:\n        assert isinstance(\n            result, np.number | float | int\n        ), f\"Expected np.number, float or int for result, got {type(result)}\"\n        result = Scalar(c=float(result))\n\n    return result\n"
}