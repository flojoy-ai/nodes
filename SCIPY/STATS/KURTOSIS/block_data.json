{
  "description": "The description of that function is as follows:\n\n    Compute the kurtosis (Fisher or Pearson) of a dataset.\n\n    Kurtosis is the fourth central moment divided by the square of the variance.\n    If Fisher's definition is used, then 3.0 is subtracted from the result to give 0.0 for a normal distribution.\n\n    If bias is False then the kurtosis is calculated using k statistics to eliminate bias coming from biased moment estimators\n\n    Use `kurtosistest` to see if result is close enough to normal.",
  "parameters": [
    {
      "name": "a",
      "type": "array",
      "description": "Data for which the kurtosis is calculated."
    },
    {
      "name": "axis",
      "type": "int or None, default: 0",
      "description": "If an int, the axis of the input along which to compute the statistic.\nThe statistic of each axis-slice (e.g. row) of the input will appear in a\ncorresponding element of the output.\nIf None, the input will be raveled before computing the statistic."
    },
    {
      "name": "fisher",
      "type": "bool",
      "description": "If True, Fisher's definition is used (normal ==> 0.0).\nIf False, Pearson's definition is used (normal ==> 3.0)."
    },
    {
      "name": "bias",
      "type": "bool",
      "description": "If False, then the calculations are corrected for statistical bias."
    },
    {
      "name": "nan_policy",
      "type": "{'propagate', 'omit', 'raise'}",
      "description": "Defines how to handle input NaNs.\n- propagate : if a NaN is present in the axis slice (e.g. row) along\nwhich the  statistic is computed, the corresponding entry of the output will be NaN.\n- omit : NaNs will be omitted when performing the calculation.\nIf insufficient data remains in the axis slice along which the\nstatistic is computed, the corresponding entry of the output will be NaN.\n- raise : if a NaN is present, a ValueError will be raised."
    },
    {
      "name": "keepdims",
      "type": "bool, default: False",
      "description": "If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array."
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "DataContainer",
      "description": "type 'ordered pair', 'scalar', or 'matrix'"
    }
  ],
  "code": "from flojoy import OrderedPair, flojoy, Matrix, Scalar\nimport numpy as np\nfrom collections import namedtuple\nfrom typing import Literal\n\nimport scipy.stats\n\n\n@flojoy\ndef KURTOSIS(\n    default: OrderedPair | Matrix,\n    axis: int = 0,\n    fisher: bool = True,\n    bias: bool = True,\n    nan_policy: str = \"propagate\",\n    keepdims: bool = False,\n) -> OrderedPair | Matrix | Scalar:\n    \"\"\"The KURTOSIS node is based on a numpy or scipy function.\n\n    The description of that function is as follows:\n\n        Compute the kurtosis (Fisher or Pearson) of a dataset.\n\n        Kurtosis is the fourth central moment divided by the square of the variance.\n        If Fisher's definition is used, then 3.0 is subtracted from the result to give 0.0 for a normal distribution.\n\n        If bias is False then the kurtosis is calculated using k statistics to eliminate bias coming from biased moment estimators\n\n        Use `kurtosistest` to see if result is close enough to normal.\n\n    Parameters\n    ----------\n    a : array\n        Data for which the kurtosis is calculated.\n    axis : int or None, default: 0\n        If an int, the axis of the input along which to compute the statistic.\n        The statistic of each axis-slice (e.g. row) of the input will appear in a\n        corresponding element of the output.\n        If None, the input will be raveled before computing the statistic.\n    fisher : bool, optional\n        If True, Fisher's definition is used (normal ==> 0.0).\n        If False, Pearson's definition is used (normal ==> 3.0).\n    bias : bool, optional\n        If False, then the calculations are corrected for statistical bias.\n    nan_policy : {'propagate', 'omit', 'raise'}\n        Defines how to handle input NaNs.\n        - propagate : if a NaN is present in the axis slice (e.g. row) along\n        which the  statistic is computed, the corresponding entry of the output will be NaN.\n        - omit : NaNs will be omitted when performing the calculation.\n        If insufficient data remains in the axis slice along which the\n        statistic is computed, the corresponding entry of the output will be NaN.\n        - raise : if a NaN is present, a ValueError will be raised.\n    keepdims : bool, default: False\n        If this is set to True, the axes which are reduced are left\n        in the result as dimensions with size one. With this option,\n        the result will broadcast correctly against the input array.\n\n    Returns\n    -------\n    DataContainer\n        type 'ordered pair', 'scalar', or 'matrix'\n    \"\"\"\n\n    result = scipy.stats.kurtosis(\n        a=default.y,\n        axis=axis,\n        fisher=fisher,\n        bias=bias,\n        nan_policy=nan_policy,\n        keepdims=keepdims,\n    )\n\n    if isinstance(result, np.ndarray):\n        result = OrderedPair(x=default.x, y=result)\n    else:\n        assert isinstance(\n            result, np.number | float | int\n        ), f\"Expected np.number, float or int for result, got {type(result)}\"\n        result = Scalar(c=float(result))\n\n    return result\n"
}