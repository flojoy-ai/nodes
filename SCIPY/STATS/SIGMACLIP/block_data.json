{
  "description": "The description of that function is as follows:\n\n    Perform iterative sigma-clipping of array elements.\n\n    Starting from the full sample, all elements outside the critical range are removed,\n    i.e. all elements of the input array 'c' that satisfy either of the following conditions::\n\n    c < mean(c) - std(c)*low\n    c > mean(c) + std(c)*high\n\n    The iteration continues with the updated sample until no elements are outside the (updated) range.",
  "parameters": [
    {
      "name": "select_return",
      "type": "This function has returns multiple objects ['clipped', 'lower', 'upper'].",
      "description": "Select the desired one to return.\nSee the respective function docs for descriptors."
    },
    {
      "name": "a",
      "type": "array_like",
      "description": "Data array, will be raveled if not 1-D."
    },
    {
      "name": "low",
      "type": "float",
      "description": "Lower bound factor of sigma clipping. Default is 4."
    },
    {
      "name": "high",
      "type": "float",
      "description": "Upper bound factor of sigma clipping. Default is 4."
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "DataContainer",
      "description": "type 'ordered pair', 'scalar', or 'matrix'"
    }
  ],
  "code": "from flojoy import OrderedPair, flojoy, Matrix, Scalar\nimport numpy as np\nfrom collections import namedtuple\nfrom typing import Literal\n\nimport scipy.stats\n\n\n@flojoy\ndef SIGMACLIP(\n    default: OrderedPair | Matrix,\n    low: float = 4.0,\n    high: float = 4.0,\n    select_return: Literal[\"clipped\", \"lower\", \"upper\"] = \"clipped\",\n) -> OrderedPair | Matrix | Scalar:\n    \"\"\"The SIGMACLIP node is based on a numpy or scipy function.\n\n    The description of that function is as follows:\n\n        Perform iterative sigma-clipping of array elements.\n\n        Starting from the full sample, all elements outside the critical range are removed,\n        i.e. all elements of the input array 'c' that satisfy either of the following conditions::\n\n        c < mean(c) - std(c)*low\n        c > mean(c) + std(c)*high\n\n        The iteration continues with the updated sample until no elements are outside the (updated) range.\n\n    Parameters\n    ----------\n    select_return : This function has returns multiple objects ['clipped', 'lower', 'upper'].\n        Select the desired one to return.\n        See the respective function docs for descriptors.\n    a : array_like\n        Data array, will be raveled if not 1-D.\n    low : float, optional\n        Lower bound factor of sigma clipping. Default is 4.\n    high : float, optional\n        Upper bound factor of sigma clipping. Default is 4.\n\n    Returns\n    -------\n    DataContainer\n        type 'ordered pair', 'scalar', or 'matrix'\n    \"\"\"\n\n    result = scipy.stats.sigmaclip(\n        a=default.y,\n        low=low,\n        high=high,\n    )\n\n    return_list = [\"clipped\", \"lower\", \"upper\"]\n    if isinstance(result, tuple):\n        res_dict = {}\n        num = min(len(result), len(return_list))\n        for i in range(num):\n            res_dict[return_list[i]] = result[i]\n        result = res_dict[select_return]\n    else:\n        result = result._asdict()\n        result = result[select_return]\n\n    if isinstance(result, np.ndarray):\n        result = OrderedPair(x=default.x, y=result)\n    else:\n        assert isinstance(\n            result, np.number | float | int\n        ), f\"Expected np.number, float or int for result, got {type(result)}\"\n        result = Scalar(c=float(result))\n\n    return result\n"
}