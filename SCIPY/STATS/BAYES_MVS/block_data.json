{
  "description": "The description of that function is as follows:\n\n    Bayesian confidence intervals for the mean, var, and std.",
  "parameters": [
    {
      "name": "data",
      "type": "array_like",
      "description": "Input data, if multi-dimensional it is flattened to 1-D by 'bayes_mvs'.\nRequires 2 or more data points."
    },
    {
      "name": "alpha",
      "type": "float",
      "description": "Probability that the returned confidence interval contains the true parameter."
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "DataContainer",
      "description": "type 'ordered pair', 'scalar', or 'matrix'"
    }
  ],
  "code": "from flojoy import OrderedPair, flojoy, Matrix, Scalar\nimport numpy as np\nfrom collections import namedtuple\nfrom typing import Literal\n\nimport scipy.stats\n\n\n@flojoy\ndef BAYES_MVS(\n    default: OrderedPair | Matrix,\n    alpha: float = 0.9,\n) -> OrderedPair | Matrix | Scalar:\n    \"\"\"The BAYES_MVS node is based on a numpy or scipy function.\n\n    The description of that function is as follows:\n\n        Bayesian confidence intervals for the mean, var, and std.\n\n    Parameters\n    ----------\n    data : array_like\n        Input data, if multi-dimensional it is flattened to 1-D by 'bayes_mvs'.\n        Requires 2 or more data points.\n    alpha : float, optional\n        Probability that the returned confidence interval contains the true parameter.\n\n    Returns\n    -------\n    DataContainer\n        type 'ordered pair', 'scalar', or 'matrix'\n    \"\"\"\n\n    result = OrderedPair(\n        x=default.x,\n        y=scipy.stats.bayes_mvs(\n            data=default.y,\n            alpha=alpha,\n        ),\n    )\n\n    return result\n"
}