{
  "description": "The description of that function is as follows:\n\n    Perform a test that the probability of success is p.\n\nNote: 'binom_test' is deprecated; it is recommended that 'binomtest' be used instead.\n\n    This is an exact, two-sided test of the null hypothesis that the probability of success in a Bernoulli experiment is 'p'.",
  "parameters": [
    {
      "name": "x",
      "type": "int or array_like",
      "description": "The number of successes, or if x has length 2, it is the\nnumber of successes and the number of failures."
    },
    {
      "name": "n",
      "type": "int",
      "description": "The number of trials.  This is ignored if x gives both the\nnumber of successes and failures."
    },
    {
      "name": "p",
      "type": "float",
      "description": "The hypothesized probability of success. 0 <= p <= 1.\nThe default value is p = 0.5."
    },
    {
      "name": "alternative",
      "type": "{'two-sided', 'greater', 'less'}",
      "description": "Indicates the alternative hypothesis.\nThe default value is 'two-sided'."
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "DataContainer",
      "description": "type 'ordered pair', 'scalar', or 'matrix'"
    }
  ],
  "code": "from flojoy import OrderedPair, flojoy, Matrix, Scalar\nimport numpy as np\nfrom collections import namedtuple\nfrom typing import Literal\n\nimport scipy.stats\n\n\n@flojoy\ndef BINOM_TEST(\n    default: OrderedPair | Matrix,\n    n: int = 2,\n    p: float = 0.5,\n    alternative: str = \"two-sided\",\n) -> OrderedPair | Matrix | Scalar:\n    \"\"\"The BINOM_TEST node is based on a numpy or scipy function.\n\n    The description of that function is as follows:\n\n        Perform a test that the probability of success is p.\n\n    Note: 'binom_test' is deprecated; it is recommended that 'binomtest' be used instead.\n\n        This is an exact, two-sided test of the null hypothesis that the probability of success in a Bernoulli experiment is 'p'.\n\n    Parameters\n    ----------\n    x : int or array_like\n        The number of successes, or if x has length 2, it is the\n        number of successes and the number of failures.\n    n : int\n        The number of trials.  This is ignored if x gives both the\n        number of successes and failures.\n    p : float, optional\n        The hypothesized probability of success. 0 <= p <= 1.\n        The default value is p = 0.5.\n    alternative : {'two-sided', 'greater', 'less'}, optional\n        Indicates the alternative hypothesis.\n        The default value is 'two-sided'.\n\n    Returns\n    -------\n    DataContainer\n        type 'ordered pair', 'scalar', or 'matrix'\n    \"\"\"\n\n    result = scipy.stats.binom_test(\n        x=default.y,\n        n=n,\n        p=p,\n        alternative=alternative,\n    )\n\n    if isinstance(result, np.ndarray):\n        result = OrderedPair(x=default.x, y=result)\n    else:\n        assert isinstance(\n            result, np.number | float | int\n        ), f\"Expected np.number, float or int for result, got {type(result)}\"\n        result = Scalar(c=float(result))\n\n    return result\n"
}