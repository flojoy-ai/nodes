{
  "description": "The description of that function is as follows:\n\n    Apply a Savitzky-Golay filter to an array.\n\n    This is a 1-D filter. If 'x'  has a dimension greater than 1, 'axis' determines the axis along which the filter is applied.",
  "parameters": [
    {
      "name": "x",
      "type": "array_like",
      "description": "The data to be filtered.\nIf 'x' is not a single or double precision floating point array,\nit will be converted to type numpy.float64 before filtering."
    },
    {
      "name": "window_length",
      "type": "int",
      "description": "The length of the filter window (i.e., the number of coefficients).\nIf 'mode' is 'interp', 'window_length' must be less than or equal to the size of 'x'."
    },
    {
      "name": "polyorder",
      "type": "int",
      "description": "The order of the polynomial used to fit the samples.\n'polyorder' must be less than 'window_length'."
    },
    {
      "name": "deriv",
      "type": "int",
      "description": "The order of the derivative to compute.\nThis must be a nonnegative integer.\nThe default is 0, which means to filter the data without differentiating."
    },
    {
      "name": "delta",
      "type": "float",
      "description": "The spacing of the samples to which the filter will be applied.\nThis is only used if deriv > 0. Default is 1.0."
    },
    {
      "name": "axis",
      "type": "int",
      "description": "The axis of the array 'x' along which the filter is to be applied.\nDefault is -1."
    },
    {
      "name": "mode",
      "type": "str",
      "description": "Must be 'mirror', 'constant', 'nearest', 'wrap' or 'interp'.\nThis determines the type of extension to use for the padded signal to\nwhich the filter is applied.\nWhen 'mode' is 'constant', the padding value is given by 'cval'.\nSee the Notes for more details on 'mirror', 'constant', 'wrap', and 'nearest'.\nWhen the 'interp' mode is selected (the default), no extension is used.\nInstead, a degree 'polyorder' polynomial is fit to the last\n'window_length' values of the edges, and this polynomial is\nused to evaluate the last 'window_length // 2' output values."
    },
    {
      "name": "cval",
      "type": "scalar",
      "description": "Value to fill past the edges of the input if 'mode' is 'constant'.\nDefault is 0.0."
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "DataContainer",
      "description": "type 'ordered pair', 'scalar', or 'matrix'"
    }
  ],
  "code": "from flojoy import OrderedPair, flojoy, Matrix, Scalar\nimport numpy as np\nfrom collections import namedtuple\nfrom typing import Literal\n\nimport scipy.signal\n\n\n@flojoy\ndef SAVGOL_FILTER(\n    default: OrderedPair | Matrix,\n    window_length: int = 2,\n    polyorder: int = 1,\n    deriv: int = 0,\n    delta: float = 1.0,\n    axis: int = -1,\n    mode: str = \"interp\",\n    cval: float = 0.0,\n) -> OrderedPair | Matrix | Scalar:\n    \"\"\"The SAVGOL_FILTER node is based on a numpy or scipy function.\n\n    The description of that function is as follows:\n\n        Apply a Savitzky-Golay filter to an array.\n\n        This is a 1-D filter. If 'x'  has a dimension greater than 1, 'axis' determines the axis along which the filter is applied.\n\n    Parameters\n    ----------\n    x : array_like\n        The data to be filtered.\n        If 'x' is not a single or double precision floating point array,\n        it will be converted to type numpy.float64 before filtering.\n    window_length : int\n        The length of the filter window (i.e., the number of coefficients).\n        If 'mode' is 'interp', 'window_length' must be less than or equal to the size of 'x'.\n    polyorder : int\n        The order of the polynomial used to fit the samples.\n        'polyorder' must be less than 'window_length'.\n    deriv : int, optional\n        The order of the derivative to compute.\n        This must be a nonnegative integer.\n        The default is 0, which means to filter the data without differentiating.\n    delta : float, optional\n        The spacing of the samples to which the filter will be applied.\n        This is only used if deriv > 0. Default is 1.0.\n    axis : int, optional\n        The axis of the array 'x' along which the filter is to be applied.\n        Default is -1.\n    mode : str, optional\n        Must be 'mirror', 'constant', 'nearest', 'wrap' or 'interp'.\n        This determines the type of extension to use for the padded signal to\n        which the filter is applied.\n        When 'mode' is 'constant', the padding value is given by 'cval'.\n        See the Notes for more details on 'mirror', 'constant', 'wrap', and 'nearest'.\n        When the 'interp' mode is selected (the default), no extension is used.\n        Instead, a degree 'polyorder' polynomial is fit to the last\n        'window_length' values of the edges, and this polynomial is\n        used to evaluate the last 'window_length // 2' output values.\n    cval : scalar, optional\n        Value to fill past the edges of the input if 'mode' is 'constant'.\n        Default is 0.0.\n\n    Returns\n    -------\n    DataContainer\n        type 'ordered pair', 'scalar', or 'matrix'\n    \"\"\"\n\n    result = scipy.signal.savgol_filter(\n        x=default.y,\n        window_length=window_length,\n        polyorder=polyorder,\n        deriv=deriv,\n        delta=delta,\n        axis=axis,\n        mode=mode,\n        cval=cval,\n    )\n\n    if isinstance(result, np.ndarray):\n        result = OrderedPair(x=default.x, y=result)\n    else:\n        assert isinstance(\n            result, np.number | float | int\n        ), f\"Expected np.number, float or int for result, got {type(result)}\"\n        result = Scalar(c=float(result))\n\n    return result\n"
}