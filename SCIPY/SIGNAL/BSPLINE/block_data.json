{
  "description": "The description of that function is as follows:\n\n    B-spline basis function of order n.",
  "parameters": [
    {
      "name": "x",
      "type": "array_like",
      "description": "A knot vector."
    },
    {
      "name": "n",
      "type": "int",
      "description": "The order of the spline. Must be non-negative, i.e. n >= 0."
    },
    {
      "name": "Returns",
      "type": null,
      "description": null
    },
    {
      "name": "----------",
      "type": null,
      "description": null
    },
    {
      "name": "DataContainer",
      "type": null,
      "description": "type 'ordered pair', 'scalar', or 'matrix'"
    }
  ],
  "returns": [],
  "code": "from flojoy import OrderedPair, flojoy, Matrix, Scalar\nimport numpy as np\nfrom collections import namedtuple\nfrom typing import Literal\n\nimport scipy.signal\n\n\n@flojoy\ndef BSPLINE(\n    default: OrderedPair | Matrix,\n    n: int = 2,\n) -> OrderedPair | Matrix | Scalar:\n    \"\"\"The BSPLINE node is based on a numpy or scipy function.\n\n    The description of that function is as follows:\n\n        B-spline basis function of order n.\n\n    Parameters\n    ----------\n    x : array_like\n        A knot vector.\n    n : int\n        The order of the spline. Must be non-negative, i.e. n >= 0.\n\n    Returns\n    ----------\n    DataContainer\n        type 'ordered pair', 'scalar', or 'matrix'\n    \"\"\"\n\n    result = scipy.signal.bspline(\n        x=default.y,\n        n=n,\n    )\n\n    if isinstance(result, np.ndarray):\n        result = OrderedPair(x=default.x, y=result)\n    else:\n        assert isinstance(\n            result, np.number | float | int\n        ), f\"Expected np.number, float or int for result, got {type(result)}\"\n        result = Scalar(c=float(result))\n\n    return result\n"
}