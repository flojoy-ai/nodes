{
  "description": "The description of that function is as follows:\n\n    Calculate the relative minima of 'data'.",
  "parameters": [
    {
      "name": "data",
      "type": "ndarray",
      "description": "Array in which to find the relative minima."
    },
    {
      "name": "axis",
      "type": "int",
      "description": "Axis over which to select from 'data'. Default is 0."
    },
    {
      "name": "order",
      "type": "int",
      "description": "How many points on each side to use for the comparison\nto consider \"comparator(n, n+x)\" to be True."
    },
    {
      "name": "mode",
      "type": "str",
      "description": "How the edges of the vector are treated.\nAvailable options are 'wrap' (wrap around) or 'clip' (treat overflow\nas the same as the last (or first) element).\nDefault 'clip'. See numpy.take."
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "DataContainer",
      "description": "type 'ordered pair', 'scalar', or 'matrix'"
    }
  ],
  "code": "from flojoy import OrderedPair, flojoy, Matrix, Scalar\nimport numpy as np\nfrom collections import namedtuple\nfrom typing import Literal\n\nimport scipy.signal\n\n\n@flojoy\ndef ARGRELMIN(\n    default: OrderedPair | Matrix,\n    axis: int = 0,\n    order: int = 1,\n    mode: str = \"clip\",\n) -> OrderedPair | Matrix | Scalar:\n    \"\"\"The ARGRELMIN node is based on a numpy or scipy function.\n\n    The description of that function is as follows:\n\n        Calculate the relative minima of 'data'.\n\n    Parameters\n    ----------\n    data : ndarray\n        Array in which to find the relative minima.\n    axis : int, optional\n        Axis over which to select from 'data'. Default is 0.\n    order : int, optional\n        How many points on each side to use for the comparison\n        to consider \"comparator(n, n+x)\" to be True.\n    mode : str, optional\n        How the edges of the vector are treated.\n        Available options are 'wrap' (wrap around) or 'clip' (treat overflow\n        as the same as the last (or first) element).\n        Default 'clip'. See numpy.take.\n\n    Returns\n    -------\n    DataContainer\n        type 'ordered pair', 'scalar', or 'matrix'\n    \"\"\"\n\n    result = OrderedPair(\n        x=default.x,\n        y=scipy.signal.argrelmin(\n            data=default.y,\n            axis=axis,\n            order=order,\n            mode=mode,\n        ),\n    )\n\n    return result\n"
}