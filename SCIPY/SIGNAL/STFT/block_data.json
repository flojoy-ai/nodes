{
  "description": "The description of that function is as follows:\n\n    Compute the Short Time Fourier Transform (STFT).\n\n    STFTs can be used as a way of quantifying the change of a nonstationary signal's frequency and phase content over time.",
  "parameters": [
    {
      "name": "select_return",
      "type": "'f', 't', 'Zxx'",
      "description": "Select the desired object to return.\nSee the respective function docs for descriptors."
    },
    {
      "name": "x",
      "type": "array_like",
      "description": "Time series of measurement values."
    },
    {
      "name": "fs",
      "type": "float",
      "description": "Sampling frequency of the 'x' time series.\nDefaults to 1.0."
    },
    {
      "name": "window",
      "type": "str or tuple or array_like",
      "description": "Desired window to use.\nIf 'window' is a string or tuple, it is passed to 'get_window'\nto generate the window values, which are DFT-even by default.\nSee 'get_window' for a list of windows and required parameters.\nIf 'window' is array_like it will be used directly as the window\nand its length must be nperseg.\nDefaults to a Hann window."
    },
    {
      "name": "nperseg",
      "type": "int",
      "description": "Length of each segment.\nDefaults to 256."
    },
    {
      "name": "noverlap",
      "type": "int",
      "description": "Number of points to overlap between segments.\nIf 'None', noverlap = nperseg // 2.\nDefaults to 'None'.\nWhen specified, the COLA constraint must be met (see Notes below)."
    },
    {
      "name": "nfft",
      "type": "int",
      "description": "Length of the FFT used, if a zero padded FFT is desired.\nIf 'None', the FFT length is 'nperseg'.\nDefaults to 'None'."
    },
    {
      "name": "detrend",
      "type": "str or function or 'False'",
      "description": "Specifies how to detrend each segment.\nIf 'detrend' is a string, it is passed as the 'type' argument to the 'detrend' function.\nIf it is a function, it takes a segment and returns a detrended segment.\nIf 'detrend' is 'False', no detrending is done.\nDefaults to 'False'."
    },
    {
      "name": "return_onesided",
      "type": "bool",
      "description": "If 'True', return a one-sided spectrum for real data.\nIf 'False' return a two-sided spectrum.\nDefaults to 'True', but for complex data, a two-sided spectrum is always returned."
    },
    {
      "name": "boundary",
      "type": "str or None",
      "description": "Specifies whether the input signal is extended at both ends, and\nhow to generate the new values, in order to center the first\nwindowed segment on the first input point.\nThis has the benefit of enabling reconstruction of the first input point\nwhen the employed window function starts at zero.\nValid options are ['even', 'odd', 'constant', 'zeros', None].\nDefaults to 'zeros', for zero padding extension.\nI.e. [1, 2, 3, 4] is extended to [0, 1, 2, 3, 4, 0] for nperseg=3."
    },
    {
      "name": "padded",
      "type": "bool",
      "description": "Specifies whether the input signal is zero-padded at the end to\nmake the signal fit exactly into an integer number of window\nsegments, so that all of the signal is included in the output.\nDefaults to 'True'.\nPadding occurs after boundary extension, if 'boundary' is not 'None',\nand 'padded' is 'True', as is the default."
    },
    {
      "name": "axis",
      "type": "int",
      "description": "Axis along which the STFT is computed.\nThe default is over the last axis (i.e. axis=-1)."
    },
    {
      "name": "scaling",
      "type": "{'spectrum', 'psd'}",
      "description": "The default 'spectrum' scaling allows each frequency line of 'Zxx' to\nbe interpreted as a magnitude spectrum.\nThe 'psd' option scales each line to a power spectral density.\nIt allows to calculate the signal's energy by numerically integrating over abs(Zxx)**2."
    },
    {
      "name": ".. versionadded",
      "type": ": 1.9.0",
      "description": null
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "DataContainer",
      "description": "type 'ordered pair', 'scalar', or 'matrix'"
    }
  ],
  "code": "from flojoy import OrderedPair, flojoy, Matrix, Scalar\nimport numpy as np\nfrom collections import namedtuple\nfrom typing import Literal\n\nimport scipy.signal\n\n\n@flojoy\ndef STFT(\n    default: OrderedPair | Matrix,\n    fs: float = 1.0,\n    window: str = \"hann\",\n    nperseg: int = 2,\n    noverlap: int = 1,\n    nfft: int = 2,\n    detrend: bool = False,\n    return_onesided: bool = True,\n    boundary: str = \"zeros\",\n    padded: bool = True,\n    axis: int = -1,\n    scaling: str = \"spectrum\",\n    select_return: Literal[\"f\", \"t\", \"Zxx\"] = \"f\",\n) -> OrderedPair | Matrix | Scalar:\n    \"\"\"The STFT node is based on a numpy or scipy function.\n\n    The description of that function is as follows:\n\n        Compute the Short Time Fourier Transform (STFT).\n\n        STFTs can be used as a way of quantifying the change of a nonstationary signal's frequency and phase content over time.\n\n    Parameters\n    ----------\n    select_return : 'f', 't', 'Zxx'\n        Select the desired object to return.\n        See the respective function docs for descriptors.\n    x : array_like\n        Time series of measurement values.\n    fs : float, optional\n        Sampling frequency of the 'x' time series.\n        Defaults to 1.0.\n    window : str or tuple or array_like, optional\n        Desired window to use.\n        If 'window' is a string or tuple, it is passed to 'get_window'\n        to generate the window values, which are DFT-even by default.\n        See 'get_window' for a list of windows and required parameters.\n        If 'window' is array_like it will be used directly as the window\n        and its length must be nperseg.\n        Defaults to a Hann window.\n    nperseg : int, optional\n        Length of each segment.\n        Defaults to 256.\n    noverlap : int, optional\n        Number of points to overlap between segments.\n        If 'None', noverlap = nperseg // 2.\n        Defaults to 'None'.\n        When specified, the COLA constraint must be met (see Notes below).\n    nfft : int, optional\n        Length of the FFT used, if a zero padded FFT is desired.\n        If 'None', the FFT length is 'nperseg'.\n        Defaults to 'None'.\n    detrend : str or function or 'False', optional\n        Specifies how to detrend each segment.\n        If 'detrend' is a string, it is passed as the 'type' argument to the 'detrend' function.\n        If it is a function, it takes a segment and returns a detrended segment.\n        If 'detrend' is 'False', no detrending is done.\n        Defaults to 'False'.\n    return_onesided : bool, optional\n        If 'True', return a one-sided spectrum for real data.\n        If 'False' return a two-sided spectrum.\n        Defaults to 'True', but for complex data, a two-sided spectrum is always returned.\n    boundary : str or None, optional\n        Specifies whether the input signal is extended at both ends, and\n        how to generate the new values, in order to center the first\n        windowed segment on the first input point.\n        This has the benefit of enabling reconstruction of the first input point\n        when the employed window function starts at zero.\n        Valid options are ['even', 'odd', 'constant', 'zeros', None].\n        Defaults to 'zeros', for zero padding extension.\n        I.e. [1, 2, 3, 4] is extended to [0, 1, 2, 3, 4, 0] for nperseg=3.\n    padded : bool, optional\n        Specifies whether the input signal is zero-padded at the end to\n        make the signal fit exactly into an integer number of window\n        segments, so that all of the signal is included in the output.\n        Defaults to 'True'.\n        Padding occurs after boundary extension, if 'boundary' is not 'None',\n        and 'padded' is 'True', as is the default.\n    axis : int, optional\n        Axis along which the STFT is computed.\n        The default is over the last axis (i.e. axis=-1).\n    scaling: {'spectrum', 'psd'}\n        The default 'spectrum' scaling allows each frequency line of 'Zxx' to\n        be interpreted as a magnitude spectrum.\n        The 'psd' option scales each line to a power spectral density.\n        It allows to calculate the signal's energy by numerically integrating over abs(Zxx)**2.\n\n    .. versionadded:: 1.9.0\n\n    Returns\n    -------\n    DataContainer\n        type 'ordered pair', 'scalar', or 'matrix'\n    \"\"\"\n\n    result = scipy.signal.stft(\n        x=default.y,\n        fs=fs,\n        window=window,\n        nperseg=nperseg,\n        noverlap=noverlap,\n        nfft=nfft,\n        detrend=detrend,\n        return_onesided=return_onesided,\n        boundary=boundary,\n        padded=padded,\n        axis=axis,\n        scaling=scaling,\n    )\n\n    return_list = [\"f\", \"t\", \"Zxx\"]\n    if isinstance(result, tuple):\n        res_dict = {}\n        num = min(len(result), len(return_list))\n        for i in range(num):\n            res_dict[return_list[i]] = result[i]\n        result = res_dict[select_return]\n    else:\n        result = result._asdict()\n        result = result[select_return]\n\n    if isinstance(result, np.ndarray):\n        result = OrderedPair(x=default.x, y=result)\n    else:\n        assert isinstance(\n            result, np.number | float | int\n        ), f\"Expected np.number, float or int for result, got {type(result)}\"\n        result = Scalar(c=float(result))\n\n    return result\n"
}