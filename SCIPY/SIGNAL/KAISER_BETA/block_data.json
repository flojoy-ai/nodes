{
  "description": "The description of that function is as follows:\n\n    Compute the Kaiser parameter 'beta', given the attenuation 'a'.",
  "parameters": [
    {
      "name": "a",
      "type": "float",
      "description": "The desired attenuation in the stopband and maximum ripple in\nthe passband, in dB.  This should be a *positive* number."
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "DataContainer",
      "description": "type 'ordered pair', 'scalar', or 'matrix'"
    }
  ],
  "code": "from flojoy import OrderedPair, flojoy, Matrix, Scalar\nimport numpy as np\nfrom collections import namedtuple\nfrom typing import Literal\n\nimport scipy.signal\n\n\n@flojoy\ndef KAISER_BETA(\n    default: OrderedPair | Matrix,\n) -> OrderedPair | Matrix | Scalar:\n    \"\"\"The KAISER_BETA node is based on a numpy or scipy function.\n\n    The description of that function is as follows:\n\n        Compute the Kaiser parameter 'beta', given the attenuation 'a'.\n\n    Parameters\n    ----------\n    a : float\n        The desired attenuation in the stopband and maximum ripple in\n        the passband, in dB.  This should be a *positive* number.\n\n    Returns\n    -------\n    DataContainer\n        type 'ordered pair', 'scalar', or 'matrix'\n    \"\"\"\n\n    result = scipy.signal.kaiser_beta(\n        a=default.y,\n    )\n\n    if isinstance(result, np.ndarray):\n        result = OrderedPair(x=default.x, y=result)\n    else:\n        assert isinstance(\n            result, np.number | float | int\n        ), f\"Expected np.number, float or int for result, got {type(result)}\"\n        result = Scalar(c=float(result))\n\n    return result\n"
}