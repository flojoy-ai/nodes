{
  "description": "Inputs\n------\ndefault : Image",
  "parameters": [],
  "returns": [
    {
      "name": null,
      "type": "Image",
      "description": null
    }
  ],
  "code": "import traceback\nfrom flojoy import flojoy, Image\nimport numpy as np\nimport os\nimport requests\n\nfrom utils.object_detection.object_detection import detect_object\n\n\n@flojoy(deps={\"opencv-python\": \"4.8.0.76\"})\ndef OBJECT_DETECTION(default: Image) -> Image:\n    \"\"\"The OBJECT_DETECTION node detects objects in the input image, and returns an 'image' DataContainer with those objects highlighted.\n\n    Inputs\n    ------\n    default : Image\n\n    Returns\n    -------\n    Image\n    \"\"\"\n\n    r = default.r\n    g = default.g\n    b = default.b\n    a = default.a\n\n    path = os.path.join(\n        os.path.abspath(os.getcwd()), \"PYTHON/utils/object_detection/yolov3.weights\"\n    )\n    exists = os.path.exists(path)\n\n    if not exists:\n        print(\"Downloading yolov3 weights for object detection.\")\n        print(\"Download may take up to a minute.\")\n        url = \"https://pjreddie.com/media/files/yolov3.weights\"\n        r = requests.get(url, allow_redirects=True)\n        open(path, \"wb\").write(r.content)\n\n    if a is not None:\n        nparr = np.stack((r, g, b, a), axis=2)\n    else:\n        nparr = np.stack((r, g, b), axis=2)\n    try:\n        img_array = detect_object(nparr)\n        red_channel = img_array[:, :, 0]\n        green_channel = img_array[:, :, 1]\n        blue_channel = img_array[:, :, 2]\n        if img_array.shape[2] == 4:\n            alpha_channel = img_array[:, :, 3]\n        else:\n            alpha_channel = None\n        return Image(r=red_channel, g=green_channel, b=blue_channel, a=alpha_channel)\n\n    except Exception:\n        print(traceback.format_exc())\n        raise\n"
}