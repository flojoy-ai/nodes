{
  "description": "It takes two dataframes of label and feature from labelled training data and a dataframe of unlabelled input data.",
  "parameters": [
    {
      "name": "kernel",
      "type": "'linear' | 'poly' | 'rbf' | 'sigmoid' | 'precomputed'",
      "description": "Specifies the kernel type to be used in the algorithm.\nFor detailed information about kernel types:\nhttps://scikit-learn.org/stable/modules/svm.html#kernel-functions"
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "DataFrame",
      "description": "The predictions for the input data."
    }
  ],
  "code": "from flojoy import flojoy, DataFrame, Matrix\nimport pandas as pd\nimport numpy as np\nfrom sklearn import svm, preprocessing\nfrom typing import Literal\n\n\n@flojoy(deps={\"scikit-learn\": \"1.2.2\"})\ndef SUPPORT_VECTOR_MACHINE(\n    train_feature: DataFrame | Matrix,\n    train_label: DataFrame | Matrix,\n    input_data: DataFrame | Matrix,\n    kernel: Literal[\"linear\", \"poly\", \"rbf\", \"sigmoid\", \"precomputed\"] = \"linear\",\n) -> DataFrame:\n    \"\"\"The SUPPORT_VECTOR_MACHINE node is used to train a support vector machine model for classification tasks.\n\n    It takes two dataframes of label and feature from labelled training data and a dataframe of unlabelled input data.\n\n    Parameters\n    ----------\n    kernel : 'linear' | 'poly' | 'rbf' | 'sigmoid' | 'precomputed'\n        Specifies the kernel type to be used in the algorithm.\n        For detailed information about kernel types:\n        https://scikit-learn.org/stable/modules/svm.html#kernel-functions\n\n    Returns\n    -------\n    DataFrame\n        The predictions for the input data.\n    \"\"\"\n\n    le = preprocessing.LabelEncoder()\n\n    if isinstance(train_feature, DataFrame):\n        train = train_feature.m.to_numpy()\n        col = train_label.m.to_numpy()\n        target_name = train_label.m.columns.values[0]\n\n    else:\n        train = train_feature.m\n        col = train_label.m\n        target_name = \"target\"\n\n    X = train\n    Y = le.fit_transform(col)\n\n    clf = svm.SVC(kernel=kernel)\n    clf.fit(X, Y)\n\n    if isinstance(input_data, DataFrame):\n        input_arr = input_data.m.to_numpy()\n    else:\n        input_arr = input_data.m\n\n    prediction = clf.predict(input_arr)\n    prediction = le.inverse_transform(prediction)\n    prediction = pd.DataFrame({target_name: prediction})\n    return DataFrame(df=prediction)\n"
}