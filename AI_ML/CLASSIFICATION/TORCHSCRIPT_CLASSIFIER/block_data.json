{
  "description": "Inputs\n----------\ninput_image : Image\n    The image to classify.\nclass_names : DataFrame\n    A dataframe containing the class names.",
  "parameters": [
    {
      "name": "model_path",
      "type": "str",
      "description": "The path to the torchscript model."
    },
    {
      "name": "Returns",
      "type": null,
      "description": null
    },
    {
      "name": "----------",
      "type": null,
      "description": null
    },
    {
      "name": "DataFrame",
      "type": null,
      "description": "A dataframe containing the class name and confidence score."
    }
  ],
  "returns": [],
  "code": "from flojoy import flojoy, run_in_venv, Image, DataFrame\n\n\n@flojoy\n@run_in_venv(\n    pip_dependencies=[\n        \"torch==2.0.1\",\n        \"torchvision==0.15.2\",\n        \"numpy\",\n        \"Pillow\",\n    ]\n)\ndef TORCHSCRIPT_CLASSIFIER(\n    input_image: Image, class_names: DataFrame, model_path: str\n) -> DataFrame:\n    \"\"\"Execute a torchscript classifier against an input image.\n\n    Inputs\n    ----------\n    input_image : Image\n        The image to classify.\n    class_names : DataFrame\n        A dataframe containing the class names.\n\n    Parameters\n    ----------\n    model_path : str\n        The path to the torchscript model.\n\n    Returns\n    ----------\n    DataFrame\n        A dataframe containing the class name and confidence score.\n    \"\"\"\n\n    import torch\n    import torchvision\n    import pandas as pd\n    import numpy as np\n    import PIL.Image\n\n    # Load model\n    model = torch.jit.load(model_path)\n    channels = [input_image.r, input_image.g, input_image.b]\n    mode = \"RGB\"\n\n    if input_image.a is not None:\n        channels.append(input_image.a)\n        mode += \"A\"\n\n    input_image_pil = PIL.Image.fromarray(\n        np.stack(channels).transpose(1, 2, 0), mode=mode\n    ).convert(\"RGB\")\n    input_tensor = torchvision.transforms.functional.to_tensor(\n        input_image_pil\n    ).unsqueeze(0)\n\n    # Run model\n    with torch.inference_mode():\n        output = model(input_tensor)\n\n    # Get class name and confidence score\n    _, pred = torch.max(output, 1)\n    class_name = class_names.m.iloc[pred.item()].item()\n    confidence = torch.nn.functional.softmax(output, dim=1)[0][pred.item()].item()\n\n    return DataFrame(\n        df=pd.DataFrame({\"class_name\": [class_name], \"confidence\": [confidence]})\n    )\n"
}