{
  "description": null,
  "parameters": [],
  "returns": [
    {
      "name": null,
      "type": "DataFrame",
      "description": "DataFrame containing the caption column and a single row."
    }
  ],
  "code": "from flojoy import flojoy, run_in_venv, DataFrame, Image\n\n\n@flojoy\n@run_in_venv(\n    pip_dependencies=[\n        \"transformers==4.30.2\",\n        \"torch~=2.0.1\",\n        \"torchvision~=0.15.2\",\n    ],\n    verbose=True,\n)\ndef NLP_CONNECT_VIT_GPT2(default: Image) -> DataFrame:\n    \"\"\"The NLP_CONNECT_VIT_GPT2 node captions an input image and produces an output string wrapped in a dataframe.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame containing the caption column and a single row.\n    \"\"\"\n\n    import numpy as np\n    import pandas as pd\n\n    import transformers\n    import torch\n    import torchvision.transforms.functional as TF\n    from flojoy import DataFrame, snapshot_download\n\n    r, g, b, a = default.r, default.g, default.b, default.a\n    nparray = (\n        np.stack((r, g, b, a), axis=2) if a is not None else np.stack((r, g, b), axis=2)\n    )\n    image = TF.to_pil_image(nparray).convert(\"RGB\")\n\n    # Download repo to local flojoy cache\n    local_repo_path = snapshot_download(\n        repo_id=\"nlpconnect/vit-gpt2-image-captioning\",\n        revision=\"dc68f91c06a1ba6f15268e5b9c13ae7a7c514084\",\n        local_dir_use_symlinks=False,\n    )\n    # Load model objects\n    model = transformers.VisionEncoderDecoderModel.from_pretrained(local_repo_path)\n    feature_extractor = transformers.ViTImageProcessor.from_pretrained(local_repo_path)\n    tokenizer = transformers.AutoTokenizer.from_pretrained(local_repo_path)\n\n    with torch.inference_mode():\n        pixel_values = feature_extractor(images=[image], return_tensors=\"pt\").pixel_values  # type: ignore\n        output_ids = model.generate(pixel_values, max_length=16, num_beams=4)  # type: ignore\n        preds = tokenizer.batch_decode(output_ids, skip_special_tokens=True)  # type: ignore\n        pred = preds[0].strip()\n\n    df_pred = pd.DataFrame.from_records([(pred,)], columns=[\"caption\"])\n\n    return DataFrame(df=df_pred)\n"
}