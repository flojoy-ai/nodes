{
  "description": "Inputs\n------\nprimary_trace : OrderedPair|DataFrame|Matrix|Vector\n    the DataContainer to be visualized as the first figure\n\nsecondary_trace : OrderedPair|DataFrame|Matrix|Vector\n    the DataContainer to be visualized as the second figure",
  "parameters": [
    {
      "name": "first_figure",
      "type": "'bar' | 'line' | 'histogram' | 'scatter'",
      "description": "plotly type to display as the first figure, default is 'scatter'"
    },
    {
      "name": "second_figure",
      "type": "'bar' | 'line' | 'histogram' | 'scatter'",
      "description": "plotly type to display as the second figure, default is 'line'"
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "Plotly",
      "description": "the DataContainer containing Plotly visualization of both figures"
    }
  ],
  "code": "from flojoy import flojoy, OrderedPair, DataFrame, Matrix, Plotly, Vector\nimport plotly.graph_objects as go\nimport pandas as pd\nimport numpy as np\nfrom nodes.VISUALIZERS.template import plot_layout\nfrom typing import Literal\n\n\n@flojoy\ndef COMPOSITE(\n    primary_trace: OrderedPair | DataFrame | Matrix | Vector,\n    secondary_trace: OrderedPair | DataFrame | Matrix | Vector,\n    first_figure: Literal[\"bar\", \"line\", \"histogram\", \"scatter\"] = \"scatter\",\n    second_figure: Literal[\"bar\", \"line\", \"histogram\", \"scatter\"] = \"line\",\n) -> Plotly:\n    \"\"\"The COMPOSITE node creates a combination of Plotly visualizations for a given input data container.\n\n    Inputs\n    ------\n    primary_trace : OrderedPair|DataFrame|Matrix|Vector\n        the DataContainer to be visualized as the first figure\n\n    secondary_trace : OrderedPair|DataFrame|Matrix|Vector\n        the DataContainer to be visualized as the second figure\n\n    Parameters\n    ----------\n    first_figure : 'bar' | 'line' | 'histogram' | 'scatter'\n        plotly type to display as the first figure, default is 'scatter'\n    second_figure : 'bar' | 'line' | 'histogram' | 'scatter'\n        plotly type to display as the second figure, default is 'line'\n\n    Returns\n    -------\n    Plotly\n        the DataContainer containing Plotly visualization of both figures\n    \"\"\"\n\n    layout = plot_layout(title=\"COMPOSITE\")\n    fig = go.Figure(layout=layout)\n    match_figure(fig, first_figure, primary_trace)\n    match_figure(fig, second_figure, secondary_trace)\n\n    fig.update_layout(dict(autosize=True, height=None, width=None))\n    return Plotly(fig=fig)\n\n\ndef match_figure(\n    fig: go.Figure,\n    figure_type: Literal[\"bar\", \"line\", \"histogram\", \"scatter\"],\n    dc: OrderedPair | Matrix | DataFrame | Vector,\n):\n    match figure_type:\n        case \"bar\":\n            add_bar_trace(fig, dc)\n        case \"histogram\":\n            add_histogram_trace(fig, dc)\n        case \"line\":\n            add_line_trace(fig, dc)\n        case \"scatter\":\n            add_scatter_trace(fig, dc)\n\n\ndef add_bar_trace(fig: go.Figure, dc: OrderedPair | Matrix | DataFrame | Vector):\n    match dc:\n        case DataFrame():\n            df = dc.m\n            first_col = df.iloc[:, 0]\n            is_timeseries = False\n            if is_timeseries:\n                for col in df.columns:\n                    if col != df.columns[0]:\n                        fig.add_trace(go.Bar(y=df[col].values, x=first_col, name=col))\n                fig.update_layout(xaxis_title=df.columns[0])\n            else:\n                for col in df.columns:\n                    if df[col].dtype == \"object\":\n                        counts = df[col].value_counts()\n                        fig.add_trace(\n                            go.Bar(\n                                x=counts.index.tolist(),\n                                y=counts.tolist(),\n                                name=col,\n                            )\n                        )\n                    else:\n                        fig.add_trace(go.Bar(x=df.index, y=df[col], name=col))\n                fig.update_layout(xaxis_title=\"DF index\", yaxis_title=\"Y Axis\")\n        case OrderedPair():\n            x = dc.x\n            if isinstance(dc.x, dict):\n                dict_keys = list(dc.x.keys())\n                x = dc.x[dict_keys[0]]\n            y = dc.y\n            fig.add_trace(go.Bar(x=x, y=y))\n        case Matrix():\n            m = dc.m\n            num_rows, num_cols = m.shape\n            x_ticks = np.arange(num_cols)\n\n            for i in range(num_rows):\n                fig.add_trace(go.Bar(x=x_ticks, y=m[i, :], name=f\"Row {i+1}\"))\n            fig.update_layout(xaxis_title=\"Column\", yaxis_title=\"Value\")\n        case Vector():\n            y = dc.v\n            x = np.arange(len(y))\n            fig.add_trace(go.Bar(x=x, y=y))\n\n\ndef add_histogram_trace(fig: go.Figure, dc: OrderedPair | Matrix | DataFrame | Vector):\n    match dc:\n        case DataFrame():\n            df = dc.m\n            for col in df.columns:\n                fig.add_trace(go.Histogram(x=df[col], name=col))\n            fig.update_layout(xaxis_title=\"Value\", yaxis_title=\"Frequency\")\n        case OrderedPair():\n            y = dc.y\n            fig.add_trace(go.Histogram(x=y))\n        case Matrix():\n            m = dc.m\n            histogram_trace = go.Histogram(x=m.flatten())\n            fig.add_trace(histogram_trace)\n        case Vector():\n            y = dc.v\n            fig.add_trace(go.Histogram(x=y))\n\n\ndef add_line_trace(fig: go.Figure, dc: OrderedPair | Matrix | DataFrame | Vector):\n    match dc:\n        case DataFrame():\n            df = dc.m\n            first_col = df.iloc[:, 0]\n            is_timeseries = False\n            if pd.api.types.is_datetime64_any_dtype(first_col):\n                is_timeseries = True\n            if is_timeseries:\n                for col in df.columns:\n                    if col != df.columns[0]:\n                        fig.add_trace(\n                            go.Scatter(\n                                y=df[col].values,\n                                x=first_col,\n                                mode=\"lines\",\n                                name=col,\n                            )\n                        )\n            else:\n                for col in df.columns:\n                    fig.add_trace(\n                        go.Scatter(\n                            y=df[col].values,\n                            x=df.index,\n                            mode=\"lines\",\n                            name=col,\n                        )\n                    )\n        case OrderedPair():\n            x = dc.x\n            if isinstance(dc.x, dict):\n                dict_keys = list(dc.x.keys())\n                x = dc.x[dict_keys[0]]\n            y = dc.y\n            fig.add_trace(go.Scatter(x=x, y=y, mode=\"lines\"))\n        case Matrix():\n            m = dc.m\n            num_rows, num_cols = m.shape\n            x_ticks = np.arange(num_cols)\n            for i in range(num_rows):\n                fig.add_trace(\n                    go.Scatter(x=x_ticks, y=m[i, :], name=f\"Row {i+1}\", mode=\"lines\")\n                )\n            fig.update_layout(xaxis_title=\"Column\", yaxis_title=\"Value\")\n        case Vector():\n            y = dc.v\n            x = np.arange(len(y))\n            fig.add_trace(go.Scatter(x=x, y=y, mode=\"lines\"))\n\n\ndef add_scatter_trace(fig: go.Figure, dc: OrderedPair | Matrix | DataFrame | Vector):\n    match dc:\n        case OrderedPair():\n            x = dc.x\n            if isinstance(dc.x, dict):\n                dict_keys = list(dc.x.keys())\n                x = dc.x[dict_keys[0]]\n            y = dc.y\n            fig.add_trace(go.Scatter(x=x, y=y, mode=\"markers\", marker=dict(size=4)))\n        case DataFrame():\n            df = dc.m\n            first_col = df.iloc[:, 0]\n            is_timeseries = False\n            if pd.api.types.is_datetime64_any_dtype(first_col):\n                is_timeseries = True\n            if is_timeseries:\n                for col in df.columns:\n                    if col != df.columns[0]:\n                        fig.add_trace(\n                            go.Scatter(x=first_col, y=df[col], mode=\"markers\", name=col)\n                        )\n            else:\n                for col in df.columns:\n                    fig.add_trace(\n                        go.Scatter(x=df.index, y=df[col], mode=\"markers\", name=col)\n                    )\n        case Matrix():\n            m = dc.m\n            num_rows, num_cols = m.shape\n            x_ticks = np.arange(num_cols)\n            for i in range(num_rows):\n                fig.add_trace(\n                    go.Scatter(x=x_ticks, y=m[i, :], name=f\"Row {i+1}\", mode=\"markers\")\n                )\n\n            fig.update_layout(xaxis_title=\"Column\", yaxis_title=\"Value\")\n        case Vector():\n            y = dc.v\n            x = np.arange(len(y))\n            fig.add_trace(go.Scatter(x=x, y=y, mode=\"markers\", marker=dict(size=4)))\n"
}