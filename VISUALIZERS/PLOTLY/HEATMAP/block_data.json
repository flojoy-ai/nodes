{
  "description": "Inputs\n------\ndefault : OrderedPair|OrderedTriple|DataFrame|Vector|Matrix|Grayscale\n    the DataContainer to be visualized",
  "parameters": [
    {
      "name": "show_text",
      "type": "bool",
      "description": "whether or not to show the text inside the heatmap color blocks"
    },
    {
      "name": "histogram",
      "type": "bool",
      "description": "whether or not to render a histogram of the image next to the render"
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "Plotly",
      "description": "the DataContainer containing the Plotly heatmap visualization"
    }
  ],
  "code": "from flojoy import (\n    Plotly,\n    OrderedPair,\n    flojoy,\n    Matrix,\n    Grayscale,\n    DataFrame,\n    Vector,\n    OrderedTriple,\n)\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\n\nimport numpy as np\nfrom nodes.VISUALIZERS.template import plot_layout\n\n\n@flojoy\ndef HEATMAP(\n    default: OrderedPair | Matrix | Grayscale | DataFrame | Vector | OrderedTriple,\n    show_text: bool = False,\n    histogram: bool = False,\n) -> Plotly:\n    \"\"\"The HEATMAP node creates a Plotly Heatmap visualization for a given input DataContainer.\n\n    Inputs\n    ------\n    default : OrderedPair|OrderedTriple|DataFrame|Vector|Matrix|Grayscale\n        the DataContainer to be visualized\n\n    Parameters\n    ----------\n    show_text : bool\n        whether or not to show the text inside the heatmap color blocks\n    histogram : bool\n        whether or not to render a histogram of the image next to the render\n\n    Returns\n    -------\n    Plotly\n        the DataContainer containing the Plotly heatmap visualization\n\n    \"\"\"\n    layout = plot_layout(title=\"HEATMAP\")\n    if histogram:\n        layout.sliders = [\n            {\n                \"steps\": [\n                    {\n                        \"label\": str(v),\n                        \"method\": \"restyle\",\n                        \"args\": [{\"zmin\": 0, \"zmax\": v}],\n                    }\n                    for v in range(1, 255, 1)\n                ],\n                \"name\": \"zmax\",\n            },\n        ]\n    text_template = \"%{text}\"\n\n    fig = (\n        go.Figure()\n        if not histogram\n        else make_subplots(\n            rows=1,\n            cols=2,\n            column_widths=[0.9, 0.1],\n            specs=[[{}, {}]],\n            horizontal_spacing=0.05,\n        )\n    )\n    match default:\n        case Vector():\n            z = default.v\n            if z.ndim < 2:\n                num_columns = len(z) // 2\n                z = np.reshape(z, (2, num_columns))\n            fig.add_trace(\n                go.Heatmap(\n                    z=z,\n                    text=z if show_text else None,\n                    texttemplate=text_template,\n                ),\n                row=None if not histogram else 1,\n                col=None if not histogram else 1,\n            )\n            if histogram:\n                histogram = np.histogram(z, bins=\"auto\")\n                x_values = histogram[1][:-1] + 0.05  # Center bars on bin edges\n                histogram_trace = go.Bar(\n                    x=x_values, y=histogram[0], orientation=\"h\", showlegend=False\n                )\n                fig.add_trace(histogram_trace, row=1, col=2)\n        case OrderedPair():\n            z = default.y\n            if default.y.ndim < 2:\n                num_columns = len(default.y) // 2\n                z = np.reshape(default.y, (2, num_columns))\n            fig.add_trace(\n                go.Heatmap(\n                    z=z,\n                    x=default.x,\n                    y=default.y,\n                    text=z if show_text else None,\n                    texttemplate=text_template,\n                ),\n                row=None if not histogram else 1,\n                col=None if not histogram else 1,\n            )\n            if histogram:\n                histogram = np.histogram(z, bins=\"auto\")\n                x_values = histogram[1][:-1] + 0.05  # Center bars on bin edges\n                histogram_trace = go.Bar(\n                    x=x_values, y=histogram[0], orientation=\"h\", showlegend=False\n                )\n                fig.add_trace(histogram_trace, row=1, col=2)\n        case OrderedTriple():\n            x = np.unique(default.x)\n            y = np.unique(default.y)\n            z_size = len(x) * len(y)\n            if z_size > len(default.z):\n                z = np.pad(\n                    default.z, (0, z_size - len(default.z)), mode=\"constant\"\n                ).reshape(len(y), len(x))\n            else:\n                z = default.z[:z_size].reshape(len(y), len(x))\n            if z.ndim < 2:\n                num_columns = len(z) // 2\n                z = np.reshape(z, (2, num_columns))\n            fig.add_trace(\n                go.Heatmap(\n                    z=z,\n                    x=x,\n                    y=y,\n                    text=z if show_text else None,\n                    texttemplate=text_template,\n                ),\n                row=None if not histogram else 1,\n                col=None if not histogram else 1,\n            )\n            if histogram:\n                histogram = np.histogram(z, bins=\"auto\")\n                x_values = histogram[1][:-1] + 0.05  # Center bars on bin edges\n                histogram_trace = go.Bar(\n                    x=x_values, y=histogram[0], orientation=\"h\", showlegend=False\n                )\n                fig.add_trace(histogram_trace, row=1, col=2)\n        case Matrix():\n            m = default.m\n            if m.ndim < 2:\n                num_columns = len(m) // 2\n                m = np.reshape(m, (2, num_columns))\n            fig.add_trace(\n                go.Heatmap(\n                    z=m,\n                    text=m if show_text else None,\n                    texttemplate=text_template,\n                ),\n                row=None if not histogram else 1,\n                col=None if not histogram else 1,\n            )\n            if histogram:\n                histogram = np.histogram(m, bins=\"auto\")\n                x_values = histogram[1][:-1] + 0.05  # Center bars on bin edges\n                histogram_trace = go.Bar(\n                    x=x_values, y=histogram[0], orientation=\"h\", showlegend=False\n                )\n                fig.add_trace(histogram_trace, row=1, col=2)\n        case Grayscale():\n            m = default.m\n\n            fig.add_trace(\n                go.Heatmap(\n                    z=m,\n                    text=m if show_text else None,\n                    texttemplate=text_template,\n                ),\n                row=None if not histogram else 1,\n                col=None if not histogram else 1,\n            )\n            if histogram:\n                histogram = np.histogram(m, bins=\"auto\")\n                x_values = histogram[1][:-1] + 0.05  # Center bars on bin edges\n                histogram_trace = go.Bar(\n                    y=x_values, x=histogram[0], orientation=\"h\", showlegend=False\n                )\n                fig.add_trace(histogram_trace, row=1, col=2)\n        case DataFrame():\n            df = default.m\n            fig = px.imshow(df, text_auto=show_text)\n\n    if histogram:\n        layout.xaxis2 = dict(\n            tickmode=\"array\",\n            tickvals=[0, histogram[0].max()],\n            ticktext=[f\"0\", f\"{histogram[0].max():.0f}\"],\n        )\n        layout.yaxis2 = dict(\n            tickmode=\"array\",\n            tickvals=[x_values.min(), x_values.max()],\n            ticktext=[\"\", \"\"],\n        )\n    fig.update_layout(layout)\n    return Plotly(\n        fig=fig,\n    )\n"
}