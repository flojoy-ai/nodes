{
  "description": "Inputs\n------\ndefault : OrderedPair|DataFrame|Matrix|Vector\n    the DataContainer to be visualized in a bar chart",
  "parameters": [],
  "returns": [
    {
      "name": null,
      "type": "Plotly",
      "description": "the DataContainer containing the Plotly Bar chart visualization"
    }
  ],
  "code": "from flojoy import flojoy, OrderedPair, DataFrame, Matrix, Plotly, Vector\nimport plotly.graph_objects as go\nimport pandas as pd\nfrom nodes.VISUALIZERS.template import plot_layout\nimport numpy as np\n\n\n@flojoy\ndef BAR(default: OrderedPair | DataFrame | Matrix | Vector) -> Plotly:\n    \"\"\"The BAR node creates a Plotly Bar visualization for a given input DataContainer.\n\n    Inputs\n    ------\n    default : OrderedPair|DataFrame|Matrix|Vector\n        the DataContainer to be visualized in a bar chart\n\n    Returns\n    -------\n    Plotly\n        the DataContainer containing the Plotly Bar chart visualization\n    \"\"\"\n\n    layout = plot_layout(title=\"BAR\")\n    fig = go.Figure(layout=layout)\n\n    match default:\n        case OrderedPair():\n            x = default.x\n            if isinstance(default.x, dict):\n                dict_keys = list(default.x.keys())\n                x = default.x[dict_keys[0]]\n            y = default.y\n            fig.add_trace(go.Bar(x=x, y=y))\n        case DataFrame():\n            df = default.m\n            first_col = df.iloc[:, 0]\n            is_timeseries = False\n            if pd.api.types.is_datetime64_any_dtype(first_col):\n                is_timeseries = True\n            if is_timeseries:\n                for col in df.columns:\n                    if col != df.columns[0]:\n                        fig.add_trace(\n                            go.Bar(\n                                y=df[col].values,\n                                x=first_col,\n                                name=col,\n                            )\n                        )\n                fig.update_layout(xaxis_title=df.columns[0])\n            else:\n                for col in df.columns:\n                    if df[col].dtype == \"object\":\n                        counts = df[col].value_counts()\n                        fig.add_trace(\n                            go.Bar(x=counts.index.tolist(), y=counts.tolist(), name=col)\n                        )\n                    else:\n                        fig.add_trace(go.Bar(x=df.index, y=df[col], name=col))\n                fig.update_layout(xaxis_title=\"DF index\", yaxis_title=\"Y Axis\")\n\n        case Matrix():\n            m = default.m\n\n            num_rows, num_cols = m.shape\n\n            x_ticks = np.arange(num_cols)\n\n            for i in range(num_rows):\n                fig.add_trace(go.Bar(x=x_ticks, y=m[i, :], name=f\"Row {i+1}\"))\n\n            fig.update_layout(xaxis_title=\"Column\", yaxis_title=\"Value\")\n        case Vector():\n            y = default.v\n            x = np.arange(len(y))\n            fig.add_trace(go.Bar(x=x, y=y))\n\n    return Plotly(fig=fig)\n"
}