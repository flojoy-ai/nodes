{
  "description": "This is the output plotly graph from the 'plot_plotly' function from 'prophet.plot'.\nIt expects the trained Prophet model from the PROPHET_PREDICT node as input.\n\nIf 'run_forecast' was True in that node, the forecasted dataframe will be available as the 'm' attribute of the default input.\nOtherwise, this will make the predictions on the raw dataframe (in which case it will be the 'm' attribute of the default input).\n\nYou can tell if that forecasted dataframe is available via the 'extra' field of data input, 'run_forecast' (data.extra[\"run_forecast\"]).\n\nInputs\n------\ndefault : DataFrame\n    the DataContainer to be visualized\n\ndata : DataContainer\n    the DataContainer that holds the prophet model and forecast data in the 'extra' field",
  "parameters": [
    {
      "name": "periods",
      "type": "int",
      "description": "The number of periods out to predict.\nOnly used if the node passed into this node (i.e. PROPHET_PREDICT) did NOT return the forecast.\nIf the forecast was included in the DataContainer, this parameter will be ignored.\n\nDefault = 365"
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "Plotly",
      "description": "the DataContainer containing the Plotly visualization of the prophet model"
    }
  ],
  "code": "from flojoy import flojoy, run_in_venv, DataFrame, Plotly\n\n\n@flojoy\n@run_in_venv(\n    pip_dependencies=[\n        \"prophet==1.1.5\",\n    ]\n)\ndef PROPHET_PLOT(default: DataFrame, periods: int = 365) -> Plotly:\n    \"\"\"The PROPHET_PLOT node plots the forecasted trend of the time series data that was passed in.\n\n    This is the output plotly graph from the 'plot_plotly' function from 'prophet.plot'.\n    It expects the trained Prophet model from the PROPHET_PREDICT node as input.\n\n    If 'run_forecast' was True in that node, the forecasted dataframe will be available as the 'm' attribute of the default input.\n    Otherwise, this will make the predictions on the raw dataframe (in which case it will be the 'm' attribute of the default input).\n\n    You can tell if that forecasted dataframe is available via the 'extra' field of data input, 'run_forecast' (data.extra[\"run_forecast\"]).\n\n    Inputs\n    ------\n    default : DataFrame\n        the DataContainer to be visualized\n\n    data : DataContainer\n        the DataContainer that holds the prophet model and forecast data in the 'extra' field\n\n    Parameters\n    ----------\n    periods : int\n        The number of periods out to predict.\n        Only used if the node passed into this node (i.e. PROPHET_PREDICT) did NOT return the forecast.\n        If the forecast was included in the DataContainer, this parameter will be ignored.\n\n        Default = 365\n\n    Returns\n    -------\n    Plotly\n        the DataContainer containing the Plotly visualization of the prophet model\n    \"\"\"\n\n    import os\n    import sys\n    import prophet\n\n    import pandas as pd\n    import numpy as np\n\n    from prophet.plot import plot_plotly\n    from prophet.serialize import model_from_json\n\n    def _make_dummy_dataframe_for_prophet():\n        \"\"\"Generate random time series data to test if prophet works\"\"\"\n        start_date = pd.Timestamp(\"2023-01-01\")\n        end_date = pd.Timestamp(\"2023-07-20\")\n        num_days = (end_date - start_date).days + 1\n        timestamps = pd.date_range(start=start_date, end=end_date, freq=\"D\")\n        data = np.random.randn(num_days)  # Random data points\n        df = pd.DataFrame({\"ds\": timestamps, \"ys\": data})\n        df.rename(\n            columns={df.columns[0]: \"ds\", df.columns[1]: \"y\"}, inplace=True\n        )  # PROPHET model expects first column to be `ds` and second to be `y`\n        return df\n\n    def _apply_macos_prophet_hotfix():\n        \"\"\"This is a hotfix for MacOS. See https://github.com/facebook/prophet/issues/2250#issuecomment-1559516328 for more detail\"\"\"\n\n        if sys.platform != \"darwin\":\n            return\n\n        # Test if prophet works (i.e. if the hotfix had already been applied)\n        try:\n            _dummy_df = _make_dummy_dataframe_for_prophet()\n            prophet.Prophet().fit(_dummy_df)\n        except RuntimeError:\n            print(\"Could not run prophet, applying hotfix...\")\n        else:\n            return\n\n        prophet_dir = prophet.__path__[0]  # type: ignore\n        # Get stan dir\n        stan_dir = os.path.join(prophet_dir, \"stan_model\")\n        # Find cmdstan-xxxxx dir\n        cmdstan_basename = [x for x in os.listdir(stan_dir) if x.startswith(\"cmdstan\")]\n        assert len(cmdstan_basename) == 1, \"Could not find cmdstan dir\"\n        cmdstan_basename = cmdstan_basename[0]\n        # Run (from stan_dir) : install_name_tool -add_rpath @executable_path/<CMDSTAN_BASENAME>/stan/lib/stan_math/lib/tbb prophet_model.bin\n        cmd = f\"install_name_tool -add_rpath @executable_path/{cmdstan_basename}/stan/lib/stan_math/lib/tbb prophet_model.bin\"\n        cwd = os.getcwd()\n        os.chdir(stan_dir)\n        return_code = os.system(cmd)\n        os.chdir(cwd)\n        if return_code != 0:\n            raise RuntimeError(\"Could not apply hotfix\")\n\n    _apply_macos_prophet_hotfix()\n\n    extra = default.extra\n    if not extra or \"prophet\" not in extra:\n        raise ValueError(\n            \"Prophet model must be available in DataContainer 'extra' key to plot\"\n        )\n\n    node_name = __name__.split(\".\")[-1]\n\n    model = model_from_json(extra[\"prophet\"])\n    if extra.get(\"run_forecast\") is not None:\n        forecast = default.m\n    else:\n        future = model.make_future_dataframe(periods=periods)\n        forecast = model.predict(future)\n    fig = plot_plotly(model, forecast)\n    fig.update_layout(\n        dict(title=node_name, autosize=True, template={}, height=None, width=None),\n        overwrite=True,\n    )\n\n    return Plotly(fig=fig)\n"
}