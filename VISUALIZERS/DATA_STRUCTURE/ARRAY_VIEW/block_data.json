{
  "description": "Inputs\n------\ndefault : OrderedPair | DataFrame | Matrix | Image\n    the DataContainer to be visualized in array format",
  "parameters": [],
  "returns": [
    {
      "name": null,
      "type": "Plotly",
      "description": "the DataContainer containing the visualization of the input in array format"
    }
  ],
  "code": "from flojoy import flojoy, OrderedPair, DataFrame, Matrix, Image, Plotly\nimport plotly.graph_objects as go\nimport numpy as np\n\nCELL_SIZE = 50\nFONT_SIZE = 10\nMAX_ALLOWED_SHAPE = 10\nl_dot = \"$\\\\ldots$\"\n\n\ndef numpy_array_as_table(arr: np.ndarray):\n    if arr.size > MAX_ALLOWED_SHAPE:\n        converted_type = arr.astype(object)\n        new_arr = converted_type[:MAX_ALLOWED_SHAPE]\n        new_arr[MAX_ALLOWED_SHAPE - 2] = l_dot\n    else:\n        new_arr = arr\n    return new_arr.reshape(-1, 1)\n\n\n@flojoy\ndef ARRAY_VIEW(default: OrderedPair | Matrix | DataFrame | Image) -> Plotly:\n    \"\"\"The ARRAY_VIEW node takes OrderedPair, DataFrame, Matrix, and Image DataContainer objects as input, and visualizes it in array format.\n\n    Inputs\n    ------\n    default : OrderedPair | DataFrame | Matrix | Image\n        the DataContainer to be visualized in array format\n\n    Returns\n    -------\n    Plotly\n        the DataContainer containing the visualization of the input in array format\n    \"\"\"\n\n    if isinstance(default, OrderedPair):\n        data = default.y\n        cell_values = numpy_array_as_table(data)\n    elif isinstance(default, DataFrame):\n        data = default.m.to_numpy(dtype=object)\n        data = data[:, :-1]\n        cell_values = numpy_array_as_table(data)\n    elif isinstance(default, Matrix):\n        data = default.m\n        cell_values = numpy_array_as_table(data)\n    else:\n        red = default.r\n        green = default.g\n        blue = default.b\n\n        if default.a is None:\n            merge = np.stack((red, green, blue), axis=2)\n        else:\n            alpha = default.a\n            merge = np.stack((red, green, blue, alpha), axis=2)\n\n        merge = merge.reshape(-1, merge.shape[-1])\n        cell_values = numpy_array_as_table(merge)\n\n    fig = go.Figure(\n        data=[\n            go.Table(\n                header=dict(line={\"width\": 0}, values=[]),\n                cells=dict(\n                    values=cell_values,\n                    line={\"width\": 3},\n                    font={\"size\": FONT_SIZE},\n                    height=CELL_SIZE,\n                    align=\"center\",\n                    format=[\".3\"],\n                ),\n            )\n        ]\n    )\n    if default.type == \"image\" or default.type == \"dataframe\":\n        width = MAX_ALLOWED_SHAPE * CELL_SIZE + 800\n\n    else:\n        width = MAX_ALLOWED_SHAPE * CELL_SIZE + 80\n    height = width + 80\n    fig.layout = go.Layout(\n        autosize=False,\n        width=width,\n        height=height,\n        margin=dict(l=0, r=0, t=0, b=0),\n        xaxis=dict(visible=False),\n        yaxis=dict(visible=False),\n        hovermode=\"closest\",\n        font=dict(size=FONT_SIZE),\n    )\n\n    return Plotly(fig=fig)\n"
}