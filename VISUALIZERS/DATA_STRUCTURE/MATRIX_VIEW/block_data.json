{
  "description": "Inputs\n------\ndefault : OrderedPair | Matrix\n    the DataContainer to be visualized in matrix format.",
  "parameters": [],
  "returns": [
    {
      "name": null,
      "type": "Plotly",
      "description": "the DataContainer containing visualization of the input in matrix format"
    }
  ],
  "code": "from flojoy import flojoy, OrderedPair, Matrix, Plotly, DCNpArrayType, Vector\nimport plotly.graph_objects as go\nimport numpy as np\n\n\nCELL_SIZE = 50\nFONT_SIZE = 10\nMAX_ALLOWED_SHAPE = 8\nv_dot = \"$\\\\vdots$\"\nd_dot = \"$\\\\ddots$\"\nl_dot = \"$\\\\ldots$\"\n\n\ndef numpy_2d_array_as_table(\n    arr: DCNpArrayType,\n    arr_row_shape: int,\n    arr_col_shape: int,\n    placeholder: str,\n):\n    new_arr = arr\n    if arr_row_shape > MAX_ALLOWED_SHAPE or arr_col_shape > MAX_ALLOWED_SHAPE:\n        new_arr = np.full(\n            (MAX_ALLOWED_SHAPE, MAX_ALLOWED_SHAPE), placeholder, dtype=object\n        )\n        new_arr[:-2, :-2] = arr[: MAX_ALLOWED_SHAPE - 2, : MAX_ALLOWED_SHAPE - 2]\n        last_row = arr[arr_row_shape - 1, :]\n        first_cols = last_row[: MAX_ALLOWED_SHAPE - 2]\n        new_arr[MAX_ALLOWED_SHAPE - 1, : MAX_ALLOWED_SHAPE - 2] = first_cols\n        last_col = arr[:, arr.shape[1] - 1]\n        first_rows = last_col[: MAX_ALLOWED_SHAPE - 2]\n        new_arr[: MAX_ALLOWED_SHAPE - 2, MAX_ALLOWED_SHAPE - 1] = first_rows\n        new_arr[MAX_ALLOWED_SHAPE - 1, MAX_ALLOWED_SHAPE - 1 :] = arr[\n            arr_row_shape - 1, arr.shape[1] - 1 :\n        ]\n        new_arr[0, MAX_ALLOWED_SHAPE - 2] = l_dot\n        new_arr[MAX_ALLOWED_SHAPE - 1, MAX_ALLOWED_SHAPE - 2] = l_dot\n\n        new_arr[MAX_ALLOWED_SHAPE - 2, 0] = v_dot\n        new_arr[MAX_ALLOWED_SHAPE - 2, MAX_ALLOWED_SHAPE - 1] = v_dot\n    else:\n        new_arr\n\n    return new_arr.T\n\n\ndef numpy_1d_array_as_table(arr: DCNpArrayType):\n    if arr.size > MAX_ALLOWED_SHAPE:\n        converted_type = arr.astype(object)\n        new_arr = converted_type[:MAX_ALLOWED_SHAPE]\n        new_arr[MAX_ALLOWED_SHAPE - 2] = l_dot\n    else:\n        new_arr = arr\n    return new_arr.reshape(-1, 1)\n\n\ndef numpy_array_as_table(arr: DCNpArrayType):\n    ndim = arr.ndim\n    if ndim == 1:\n        cell_values = numpy_1d_array_as_table(arr)\n    elif ndim > 2:\n        raise ValueError(\"MATRIX_VIEW can process only 2D arrays!\")\n    else:\n        row_shape, col_shape = arr.shape\n        cell_values = numpy_2d_array_as_table(arr, row_shape, col_shape, d_dot)\n    return cell_values\n\n\n@flojoy\ndef MATRIX_VIEW(default: OrderedPair | Matrix) -> Plotly:\n    \"\"\"The MATRIX_VIEW node takes a Matrix or OrderedPair DataContainer object as input, and visualizes it using a Plotly table in matrix format.\n\n    Inputs\n    ------\n    default : OrderedPair | Matrix\n        the DataContainer to be visualized in matrix format.\n\n    Returns\n    -------\n    Plotly\n        the DataContainer containing visualization of the input in matrix format\n    \"\"\"\n\n    if isinstance(default, Matrix):\n        np_arr = default.m\n        cell_values = numpy_array_as_table(np_arr)\n    elif isinstance(default, Vector):\n        np_arr = default.v\n        cell_values = numpy_array_as_table(np_arr)\n    else:\n        np_arr = default.y\n        cell_values = numpy_array_as_table(np_arr)\n\n    fig = go.Figure(\n        data=[\n            go.Table(\n                header=dict(line={\"width\": 0}, values=[]),\n                cells=dict(\n                    values=cell_values,\n                    line={\"width\": 3},\n                    font={\"size\": FONT_SIZE},\n                    height=CELL_SIZE,\n                    align=\"center\",\n                    format=[\".3\"],\n                ),\n            )\n        ]\n    )\n    width = MAX_ALLOWED_SHAPE * CELL_SIZE + 80\n    height = width + 80\n    fig.layout = go.Layout(\n        autosize=False,\n        width=width,\n        height=height,\n        margin=dict(l=0, r=0, t=0, b=0),\n        xaxis=dict(visible=False),\n        yaxis=dict(visible=False),\n        hovermode=\"closest\",\n        font=dict(size=FONT_SIZE),\n    )\n\n    return Plotly(fig=fig)\n"
}