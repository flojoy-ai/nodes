{
  "description": "The data is returned as a dataframe with one column containing the text and the other containing the category.",
  "parameters": [
    {
      "name": "subset",
      "type": "\"train\" | \"test\" | \"all\", default=\"train\"",
      "description": "Select the dataset to load: \"train\" for the training set, \"test\" for the test set, \"all\" for both."
    },
    {
      "name": "categories",
      "type": "list of str",
      "description": "Select the categories to load. By default, all categories are loaded.\nThe list of all categories is:\n'alt.atheism',\n'comp.graphics',\n'comp.os.ms-windows.misc',\n'comp.sys.ibm.pc.hardware',\n'comp.sys.mac.hardware',\n'comp.windows.x',\n'misc.forsale',\n'rec.autos',\n'rec.motorcycles',\n'rec.sport.baseball',\n'rec.sport.hockey',\n'sci.crypt',\n'sci.electronics',\n'sci.med',\n'sci.space',\n'soc.religion.christian',\n'talk.politics.guns',\n'talk.politics.mideast',\n'talk.politics.misc',\n'talk.religion.misc'"
    },
    {
      "name": "remove_headers",
      "type": "boolean, default=false",
      "description": "Remove the headers from the data."
    },
    {
      "name": "remove_footers",
      "type": "boolean, default=false",
      "description": "Remove the footers from the data."
    },
    {
      "name": "remove_quotes",
      "type": "boolean, default=false",
      "description": "Remove the quotes from the data."
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "DataFrame",
      "description": null
    }
  ],
  "code": "from flojoy import flojoy, DataFrame, Array\nfrom sklearn.datasets import fetch_20newsgroups\nfrom sklearn.utils import Bunch\nimport pandas as pd\nfrom typing import cast, Literal, Optional\n\n\n# TODO: Add more datasets to this node.\n@flojoy\ndef TEXT_DATASET(\n    subset: Literal[\"train\", \"test\", \"all\"] = \"train\",\n    categories: Optional[Array] = None,\n    remove_headers: bool = False,\n    remove_footers: bool = False,\n    remove_quotes: bool = False,\n) -> DataFrame:\n    \"\"\"The TEXT_DATASET node loads the 20 newsgroups dataset from scikit-learn.\n\n    The data is returned as a dataframe with one column containing the text and the other containing the category.\n\n    Parameters\n    ----------\n    subset : \"train\" | \"test\" | \"all\", default=\"train\"\n        Select the dataset to load: \"train\" for the training set, \"test\" for the test set, \"all\" for both.\n    categories : list of str, optional\n        Select the categories to load. By default, all categories are loaded.\n        The list of all categories is:\n        'alt.atheism',\n        'comp.graphics',\n        'comp.os.ms-windows.misc',\n        'comp.sys.ibm.pc.hardware',\n        'comp.sys.mac.hardware',\n        'comp.windows.x',\n        'misc.forsale',\n        'rec.autos',\n        'rec.motorcycles',\n        'rec.sport.baseball',\n        'rec.sport.hockey',\n        'sci.crypt',\n        'sci.electronics',\n        'sci.med',\n        'sci.space',\n        'soc.religion.christian',\n        'talk.politics.guns',\n        'talk.politics.mideast',\n        'talk.politics.misc',\n        'talk.religion.misc'\n    remove_headers : boolean, default=false\n        Remove the headers from the data.\n    remove_footers : boolean, default=false\n        Remove the footers from the data.\n    remove_quotes : boolean, default=false\n        Remove the quotes from the data.\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n\n    to_remove = tuple(\n        [\"headers\" for remove_headers in [remove_headers] if remove_headers]\n        + [\"footers\" for remove_footers in [remove_footers] if remove_footers]\n        + [\"quotes\" for remove_quotes in [remove_quotes] if remove_quotes]\n    )\n\n    newsgroups = fetch_20newsgroups(\n        subset=subset,\n        categories=categories.unwrap() if categories else None,\n        remove=to_remove,\n    )\n\n    newsgroups = cast(Bunch, newsgroups)\n    data = newsgroups.data\n    labels = [newsgroups.target_names[i] for i in newsgroups.target]\n\n    df = pd.DataFrame({\"Text\": data, \"Label\": labels})\n    return DataFrame(df=df)\n"
}