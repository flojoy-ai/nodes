{
  "description": "Inputs\n------\ndefault : OrderedPair|Vector\n    Input that defines the x-axis values of the function and output.",
  "parameters": [
    {
      "name": "waveform",
      "type": "select",
      "description": "The waveform type of the wave."
    },
    {
      "name": "amplitude",
      "type": "float",
      "description": "The amplitude of the wave."
    },
    {
      "name": "frequency",
      "type": "float",
      "description": "The wave frequency in radians/2pi."
    },
    {
      "name": "offset",
      "type": "float",
      "description": "The y axis offset of the function."
    },
    {
      "name": "phase",
      "type": "float",
      "description": "The x axis offset of the function."
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "OrderedPair",
      "description": "x: the input v or x values\ny: the resulting sine function"
    }
  ],
  "code": "import numpy as np\nfrom flojoy import flojoy, OrderedPair, Vector\nfrom scipy import signal\nfrom typing import Literal\n\n\n@flojoy\ndef SINE(\n    default: OrderedPair | Vector,\n    amplitude: float = 1,\n    frequency: float = 1,\n    offset: float = 0,\n    phase: float = 0,\n    waveform: Literal[\"sine\", \"square\", \"triangle\", \"sawtooth\"] = \"sine\",\n) -> OrderedPair:\n    \"\"\"The SINE node generates a waveform function with the shape being defined by the input.\n\n    Inputs\n    ------\n    default : OrderedPair|Vector\n        Input that defines the x-axis values of the function and output.\n\n    Parameters\n    ----------\n    waveform : select\n        The waveform type of the wave.\n    amplitude : float\n        The amplitude of the wave.\n    frequency : float\n        The wave frequency in radians/2pi.\n    offset : float\n        The y axis offset of the function.\n    phase : float\n        The x axis offset of the function.\n\n    Returns\n    -------\n    OrderedPair\n        x: the input v or x values\n        y: the resulting sine function\n    \"\"\"\n\n    A = amplitude\n    F = frequency\n    Y0 = offset\n\n    match default:\n        case OrderedPair():\n            x = default.y\n        case _:\n            x = default.v\n\n    if waveform == \"sine\":\n        y = Y0 + A * np.sin(2 * np.pi * F * x + phase)\n    elif waveform == \"square\":\n        y = Y0 + A * signal.square(2 * np.pi * F * x / 10 + phase)\n    elif waveform == \"triangle\":\n        y = Y0 + A * signal.sawtooth(2 * np.pi * F * x / 10 + phase, 0.5)\n    elif waveform == \"sawtooth\":\n        y = Y0 + A * signal.sawtooth(2 * np.pi * F / 10 * x + phase)\n\n    return OrderedPair(x=x, y=y)\n"
}