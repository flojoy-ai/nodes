{
  "description": "Inputs\n------\ndefault : DataContainer\n    unused in this node",
  "parameters": [
    {
      "name": "distribution",
      "type": "select",
      "description": "the distribution over the random samples"
    },
    {
      "name": "size",
      "type": "int",
      "description": "the size of the output. =1 outputs Scalar, >1 outputs Vector"
    },
    {
      "name": "lower_bound",
      "type": "float",
      "description": "the lower bound of the output interval"
    },
    {
      "name": "upper_bound",
      "type": "float",
      "description": "the upper bound of the output interval"
    },
    {
      "name": "normal_mean",
      "type": "float",
      "description": "the mean or \"center\" of the normal distribution"
    },
    {
      "name": "normal_standard_deviation",
      "type": "float",
      "description": "the spread or \"width\" of the normal distribution"
    },
    {
      "name": "poisson_events",
      "type": "float",
      "description": "the expected number of events occurring in a fixed time-interval when distribution is poisson"
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "Scalar|Vector",
      "description": "Vector if size > 1\nv: the random samples\n\nScalar if size = 1\nc: the random number"
    }
  ],
  "code": "import random\nimport numpy as np\nfrom flojoy import flojoy, Scalar, Vector, display, DataContainer\nfrom typing import Literal, Optional\n\n\n@flojoy\ndef RAND(\n    default: Optional[DataContainer] = None,\n    distribution: Literal[\"normal\", \"uniform\", \"poisson\"] = \"normal\",\n    size: int = 1000,\n    lower_bound: float = 0,\n    upper_bound: float = 1,\n    normal_mean: float = 0,\n    normal_standard_deviation: float = 1,\n    poisson_events: float = 1,\n) -> Vector | Scalar:\n    \"\"\"The RAND node generates a random number or a list of random numbers, depending on the distribution selected.\n\n    Inputs\n    ------\n    default : DataContainer\n        unused in this node\n\n    Parameters\n    ----------\n    distribution : select\n        the distribution over the random samples\n    size : int\n        the size of the output. =1 outputs Scalar, >1 outputs Vector\n    lower_bound : float\n        the lower bound of the output interval\n    upper_bound : float\n        the upper bound of the output interval\n    normal_mean : float\n        the mean or \"center\" of the normal distribution\n    normal_standard_deviation : float\n        the spread or \"width\" of the normal distribution\n    poisson_events : float\n        the expected number of events occurring in a fixed time-interval when distribution is poisson\n\n    Returns\n    -------\n    Scalar|Vector\n        Vector if size > 1\n        v: the random samples\n\n        Scalar if size = 1\n        c: the random number\n    \"\"\"\n\n    assert size >= 1, \"Size must be greater than or equal to than 1\"\n\n    if upper_bound < lower_bound:\n        upper_bound, lower_bound = lower_bound, upper_bound\n\n    seed = random.randint(1, 10000)\n    my_generator = np.random.default_rng(seed)\n\n    match distribution:\n        case \"uniform\":\n            y = my_generator.uniform(low=lower_bound, high=upper_bound, size=size)\n        case \"normal\":\n            y = my_generator.normal(\n                loc=normal_mean, scale=normal_standard_deviation, size=size\n            )\n        case \"poisson\":\n            y = my_generator.poisson(lam=poisson_events, size=size)\n\n    if size > 1:\n        return Vector(v=y)\n\n    return Scalar(c=float(y[0]))\n\n\n@display\ndef OVERLOAD(size, lower_bound, upper_bound, distribution=\"uniform\") -> None:\n    return None\n\n\n@display\ndef OVERLOAD(\n    size, normal_mean, normal_standard_deviation, distribution=\"normal\"\n) -> None:\n    return None\n\n\n@display\ndef OVERLOAD(size, poisson_events, distribution=\"poisson\") -> None:\n    return None\n"
}