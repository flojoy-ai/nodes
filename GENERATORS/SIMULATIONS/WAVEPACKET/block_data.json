{
  "description": "This example uses the Crank-Nicolson Method to solve the 1D Schrodinger equation.\n\nFurther reading:\nhttp://staff.ustc.edu.cn/~zqj/posts/Numerical_TDSE/",
  "parameters": [
    {
      "name": "L_box",
      "type": "float",
      "description": "The width of the box in Bohr lengths."
    },
    {
      "name": "center",
      "type": "float",
      "description": "The center of the initial wavepacket."
    },
    {
      "name": "momentum",
      "type": "float",
      "description": "The momentum of the initial wavepacket."
    },
    {
      "name": "sigma",
      "type": "float",
      "description": "The width of the initial wavepacket."
    },
    {
      "name": "dt",
      "type": "float",
      "description": "Time steps in atomic units, 1 a.u. = 24.188 as."
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "OrderedPair",
      "description": "The most recent wavepacket."
    }
  ],
  "code": "import numpy as np\nimport scipy.sparse as spa\nfrom scipy.sparse.linalg import splu\nfrom flojoy import flojoy, OrderedPair, SmallMemory, DefaultParams\nfrom typing import Optional\n\n\ndef gaussian_wavepacket(x, x0, k, sigma=0.1):\n    # One dimensional Gaussian wavepacket.\n    x = np.asarray(x)\n    g = np.sqrt(1 / np.sqrt(np.pi) / sigma) * np.exp(-((x - x0) ** 2) / 2 / sigma**2)\n\n    return np.exp(1j * k * (x - x0)) * g\n\n\ndef CrankNicolson(psi, V, x, dt):\n    # Crank-Nicolson method for the 1D Schrodinger equation.\n\n    # No. of spatial grid points\n    J = x.size - 1\n    dx = x[1] - x[0]\n\n    # the external potential\n    V_e = spa.diags(V)\n    # the kinetic operator\n    O_k = np.ones(J + 1)\n    T = (-1 / 2 / dx**2) * spa.spdiags([O_k, -2 * O_k, O_k], [-1, 0, 1], J + 1, J + 1)\n\n    # the two unitary matrices\n    U2 = spa.eye(J + 1) + (1j * 0.5 * dt) * (T + V_e)\n    U1 = spa.eye(J + 1) - (1j * 0.5 * dt) * (T + V_e)\n    # splu requires CSC matrix format for efficient decomposition\n    U2 = U2.tocsc()\n    LU = splu(U2)\n\n    b = U1.dot(psi)\n    PSI_t = LU.solve(b)\n\n    return PSI_t\n\n\nmemory_key = \"WAVEPACKET\"\n\n\n@flojoy(inject_node_metadata=True)\ndef WAVEPACKET(\n    default_params: DefaultParams,\n    default: Optional[OrderedPair] = None,\n    L_box: float = 20,\n    center: float = 0,\n    momentum: float = 5,\n    sigma: float = 1,\n    dt: float = 0.2,\n) -> OrderedPair:\n    \"\"\"The WAVEPACKET node approximates the behaviour of a 1D Gaussian wavepacket in an infinite-well potential box.\n\n    This example uses the Crank-Nicolson Method to solve the 1D Schrodinger equation.\n\n    Further reading:\n    http://staff.ustc.edu.cn/~zqj/posts/Numerical_TDSE/\n\n    Parameters\n    ----------\n    L_box : float\n        The width of the box in Bohr lengths.\n    center : float\n        The center of the initial wavepacket.\n    momentum : float\n        The momentum of the initial wavepacket.\n    sigma : float\n        The width of the initial wavepacket.\n    dt : float\n        Time steps in atomic units, 1 a.u. = 24.188 as.\n\n    Returns\n    -------\n    OrderedPair\n        The most recent wavepacket.\n    \"\"\"\n\n    node_id = default_params.node_id\n\n    psi_t = SmallMemory().read_memory(node_id, memory_key)\n    if psi_t is None:\n        initialize = True\n    elif isinstance(psi_t, np.ndarray):\n        initialize = False\n    else:\n        raise TypeError(\"Error loading object from SmallMemory.\")\n\n    # Box parameters.\n    xmin = -L_box / 2.0  # left boundary\n    J = 999  # No. of spatial grid points\n    x = np.linspace(xmin, xmin + L_box, J + 1, endpoint=True)\n\n    # The gaussian wavepacket as the initial wavefunction.\n    psi0 = gaussian_wavepacket(x, x0=center, k=momentum, sigma=sigma)\n    V_e = np.zeros_like(x)  # The externial potentials.\n\n    # The time evolution of the Schrodinger equation.\n    if initialize:\n        PSI = CrankNicolson(psi0, V_e, x, dt)\n    elif not initialize:\n        PSI = CrankNicolson(psi_t, V_e, x, dt)\n\n    SmallMemory().write_to_memory(node_id, memory_key, PSI)\n    y = np.abs(PSI)\n\n    return OrderedPair(x=x, y=y)\n"
}