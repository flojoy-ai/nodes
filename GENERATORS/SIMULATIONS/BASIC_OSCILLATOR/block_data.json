{
  "description": "It offers a more straightforward way to generate signals, with sample rate and the time in seconds as parameters, along with all the parameters in the SINE node.",
  "parameters": [
    {
      "name": "sample_rate",
      "type": "float",
      "description": "The number of samples that are taken in a second."
    },
    {
      "name": "time",
      "type": "float",
      "description": "The total amount of time of the signal."
    },
    {
      "name": "waveform",
      "type": "select",
      "description": "The waveform type of the wave."
    },
    {
      "name": "amplitude",
      "type": "float",
      "description": "The amplitude of the wave."
    },
    {
      "name": "frequency",
      "type": "float",
      "description": "The wave frequency in radians/2pi."
    },
    {
      "name": "offset",
      "type": "float",
      "description": "The y axis offset of the function."
    },
    {
      "name": "phase",
      "type": "float",
      "description": "The x axis offset of the function."
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "OrderedPair",
      "description": "x: time domain\ny: generated signal"
    }
  ],
  "code": "import numpy as np\nfrom flojoy import flojoy, OrderedPair\nfrom scipy import signal\nfrom typing import Literal\n\n\n@flojoy\ndef BASIC_OSCILLATOR(\n    sample_rate: int = 100,\n    time: int = 10,\n    waveform: Literal[\"sine\", \"square\", \"triangle\", \"sawtooth\"] = \"sine\",\n    amplitude: float = 1,\n    frequency: float = 1,\n    offset: float = 0,\n    phase: float = 0,\n) -> OrderedPair:\n    \"\"\"The BASIC_OSCILLATOR node is a combination of the LINSPACE and SINE nodes.\n\n    It offers a more straightforward way to generate signals, with sample rate and the time in seconds as parameters, along with all the parameters in the SINE node.\n\n    Parameters\n    ----------\n    sample_rate : float\n        The number of samples that are taken in a second.\n    time : float\n        The total amount of time of the signal.\n    waveform : select\n        The waveform type of the wave.\n    amplitude : float\n        The amplitude of the wave.\n    frequency : float\n        The wave frequency in radians/2pi.\n    offset : float\n        The y axis offset of the function.\n    phase : float\n        The x axis offset of the function.\n\n    Returns\n    -------\n    OrderedPair\n        x: time domain\n        y: generated signal\n    \"\"\"\n\n    samples = sample_rate * time\n    x = np.linspace(0, time, samples)\n\n    if waveform == \"sine\":\n        y = offset + amplitude * np.sin(2 * np.pi * frequency * x + phase)\n    elif waveform == \"square\":\n        y = offset + amplitude * signal.square(2 * np.pi * frequency * x + phase)\n    elif waveform == \"triangle\":\n        y = offset + amplitude * signal.sawtooth(2 * np.pi * frequency * x + phase, 0.5)\n    else:  # Sawtooth\n        y = offset + amplitude * signal.sawtooth(2 * np.pi * frequency * x + phase)\n\n    return OrderedPair(x=x, y=y)\n"
}