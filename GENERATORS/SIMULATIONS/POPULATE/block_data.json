{
  "description": "Inputs\n------\ndefault : OrderedPair|Vector\n    Input to use as the x-axis for the random samples.",
  "parameters": [
    {
      "name": "distribution",
      "type": "select",
      "description": "the distribution over the random samples"
    },
    {
      "name": "lower_bound",
      "type": "float",
      "description": "the lower bound of the output interval"
    },
    {
      "name": "upper_bound",
      "type": "float",
      "description": "the upper bound of the output interval"
    },
    {
      "name": "normal_mean",
      "type": "float",
      "description": "the mean or \"center\" of the normal distribution"
    },
    {
      "name": "normal_standard_deviation",
      "type": "float",
      "description": "the spread or \"width\" of the normal distribution"
    },
    {
      "name": "poisson_events",
      "type": "float",
      "description": "the expected number of events occurring in a fixed time-interval when distribution is poisson"
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "OrderedPair",
      "description": "x: provided from input data\ny: the random samples"
    }
  ],
  "code": "import random\nimport numpy as np\nfrom flojoy import flojoy, OrderedPair, Vector, display\nfrom typing import Literal, Optional\n\n\n@flojoy\ndef POPULATE(\n    default: OrderedPair | Vector,\n    distribution: Literal[\"normal\", \"uniform\", \"poisson\"] = \"normal\",\n    lower_bound: float = 0,\n    upper_bound: float = 1,\n    normal_mean: float = 0,\n    normal_standard_deviation: float = 1,\n    poisson_events: float = 1,\n) -> OrderedPair:\n    \"\"\"The POPULATE node generates random numbers, depending on the distribution selected and the input data.\n\n    Inputs\n    ------\n    default : OrderedPair|Vector\n        Input to use as the x-axis for the random samples.\n\n    Parameters\n    ----------\n    distribution : select\n        the distribution over the random samples\n    lower_bound : float\n        the lower bound of the output interval\n    upper_bound : float\n        the upper bound of the output interval\n    normal_mean : float\n        the mean or \"center\" of the normal distribution\n    normal_standard_deviation : float\n        the spread or \"width\" of the normal distribution\n    poisson_events : float\n        the expected number of events occurring in a fixed time-interval when distribution is poisson\n\n    Returns\n    -------\n    OrderedPair\n        x: provided from input data\n        y: the random samples\n    \"\"\"\n\n    if upper_bound < lower_bound:\n        upper_bound, lower_bound = lower_bound, upper_bound\n\n    seed = random.randint(1, 10000)\n    my_generator = np.random.default_rng(seed)\n\n    match default:\n        case OrderedPair():\n            size = len(default.x)\n            x = default.x\n        case Vector():\n            size = len(default.v)\n            x = default.v\n\n    match distribution:\n        case \"uniform\":\n            y = my_generator.uniform(low=lower_bound, high=upper_bound, size=size)\n        case \"normal\":\n            y = my_generator.normal(\n                loc=normal_mean, scale=normal_standard_deviation, size=size\n            )\n        case \"poisson\":\n            y = my_generator.poisson(lam=poisson_events, size=size)\n\n    return OrderedPair(x=x, y=y)\n\n\n@display\ndef OVERLOAD(lower_bound, upper_bound, distribution=\"uniform\") -> None:\n    return None\n\n\n@display\ndef OVERLOAD(normal_mean, normal_standard_deviation, distribution=\"normal\") -> None:\n    return None\n\n\n@display\ndef OVERLOAD(poisson_events, distribution=\"poisson\") -> None:\n    return None\n"
}