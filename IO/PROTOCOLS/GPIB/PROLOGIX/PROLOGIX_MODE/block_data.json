{
  "description": "From the Prologix manual:\n\nIn Controller mode, the GPIB-USB Controller acts as the Controller-In-Charge (CIC)\non the GPIB bus. When the controller receives a command over the USB port\nterminated by the USB terminator \u2013 CR (ASCII 13) or LF (ASCII 10) \u2013 it addresses the\nGPIB instrument at the currently specified address (See ++addr command) to listen, and\npasses along the received data.\n\nIn Device mode, Prologix GPIB-USB Controller acts as another peripheral on the GPIB\nbus. In this mode, the controller can act as a GPIB TALKER or GPIB LISTENER\nonly. Since Prologix GPIB-USB Controller is not the Controller-In-Charge while in this\nmode, it expects to receive commands from a GPIB controller. When Device mode is\nenabled Prologix GPIB-USB controller configures itself as a GPIB Listener. All data\nreceived by the controller over the GPIB port is passed along to the USB port without\nbuffering.\n\nInputs\n------\ndefault: DataContainer\n    Any DataContainer - likely connected to the output of the OPEN_SERIAL node.",
  "parameters": [
    {
      "name": "connection",
      "type": "Serial",
      "description": "The open serial connection with the instrument."
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "TextBlob",
      "description": "Response from the Prologix USB-to-GPIB controller."
    }
  ],
  "code": "import serial\nimport traceback\nfrom flojoy import flojoy, SerialConnection, DataContainer, TextBlob\nfrom typing import cast, Optional, Literal\n\n\n@flojoy(deps={\"pyserial\": \"3.5\"}, inject_connection=True)\ndef PROLOGIX_MODE(\n    connection: SerialConnection,\n    default: Optional[DataContainer] = None,\n    mode: Literal[\"CONTROLLER\", \"DEVICE\"] = \"CONTROLLER\",\n) -> TextBlob:\n    \"\"\"The PROLOGIX_MODE node sets the mode of the Prologix USB-to-GPIB controller - 1 for CONTROLLER mode and 0 for DEVICE mode.\n\n    From the Prologix manual:\n\n    In Controller mode, the GPIB-USB Controller acts as the Controller-In-Charge (CIC)\n    on the GPIB bus. When the controller receives a command over the USB port\n    terminated by the USB terminator \u2013 CR (ASCII 13) or LF (ASCII 10) \u2013 it addresses the\n    GPIB instrument at the currently specified address (See ++addr command) to listen, and\n    passes along the received data.\n\n    In Device mode, Prologix GPIB-USB Controller acts as another peripheral on the GPIB\n    bus. In this mode, the controller can act as a GPIB TALKER or GPIB LISTENER\n    only. Since Prologix GPIB-USB Controller is not the Controller-In-Charge while in this\n    mode, it expects to receive commands from a GPIB controller. When Device mode is\n    enabled Prologix GPIB-USB controller configures itself as a GPIB Listener. All data\n    received by the controller over the GPIB port is passed along to the USB port without\n    buffering.\n\n    Inputs\n    ------\n    default: DataContainer\n        Any DataContainer - likely connected to the output of the OPEN_SERIAL node.\n\n    Parameters\n    ----------\n    connection: Serial\n        The open serial connection with the instrument.\n\n    Returns\n    -------\n    TextBlob\n        Response from the Prologix USB-to-GPIB controller.\n    \"\"\"\n\n    # Start serial communication with the instrument\n    ser = cast(serial.Serial, connection.get_handle())\n\n    if ser is None:\n        raise ValueError(\"Serial communication is not open\")\n\n    mode_integer = 0\n    if mode == \"CONTROLLER\":\n        mode_integer = 1\n\n    cmd = \"++mode \" + str(mode_integer) + \"\\r\\n\"\n    ser.write(cmd.encode())\n\n    s = ser.read(256)\n\n    return TextBlob(s)\n"
}