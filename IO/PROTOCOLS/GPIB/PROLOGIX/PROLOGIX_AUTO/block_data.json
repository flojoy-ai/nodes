{
  "description": "When Read-After-Write is on, the Prologix USB-to-GPIB controller automatically reads a bench-top instrument's response after writing a command to it.\n\nInputs\n------\ndefault: DataContainer\n    Any DataContainer - likely connected to the output of the OPEN_SERIAL node.",
  "parameters": [
    {
      "name": "connection",
      "type": "Serial",
      "description": "The open serial connection with the instrument."
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "TextBlob",
      "description": "Response from the Prologix USB-to-GPIB controller."
    }
  ],
  "code": "import serial\nfrom flojoy import flojoy, SerialConnection, DataContainer, TextBlob\nfrom typing import cast, Optional, Literal\n\n\n@flojoy(deps={\"pyserial\": \"3.5\"}, inject_connection=True)\ndef PROLOGIX_AUTO(\n    connection: SerialConnection,\n    default: Optional[DataContainer] = None,\n    auto: Literal[\"On\", \"Off\", \"Current state\"] = \"Current state\",\n) -> TextBlob:\n    \"\"\"The PROLOGIX_AUTO node toggles \"Read-After-Write\" mode on or off.\n\n    When Read-After-Write is on, the Prologix USB-to-GPIB controller automatically reads a bench-top instrument's response after writing a command to it.\n\n    Inputs\n    ------\n    default: DataContainer\n        Any DataContainer - likely connected to the output of the OPEN_SERIAL node.\n\n    Parameters\n    ----------\n    connection: Serial\n        The open serial connection with the instrument.\n\n    Returns\n    -------\n    TextBlob\n        Response from the Prologix USB-to-GPIB controller.\n    \"\"\"\n\n    # Start serial communication with the instrument\n    ser = cast(serial.Serial, connection.get_handle())\n\n    if ser is None:\n        raise ValueError(\"Serial communication is not open\")\n\n    auto_integer = 0\n    if auto == \"Current state\":\n        ser.write(b\"++auto\\r\\n\")\n    elif auto == \"On\":\n        auto_integer = 1\n    else:\n        cmd = \"++auto \" + str(auto_integer) + \"\\r\\n\"\n        ser.write(cmd.encode())\n\n    s = ser.read(256)\n\n    return TextBlob(s)\n"
}