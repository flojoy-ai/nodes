{
  "description": "Input\n-----\nvelocity : Scalar\n    Servo velocity (10k ticks/sec [1, 15]).",
  "parameters": [],
  "returns": [
    {
      "name": null,
      "type": "Textblob",
      "description": "Traceback error (if any)"
    }
  ],
  "code": "from flojoy import flojoy, DataContainer, Scalar, TextBlob\nimport time, can, traceback\nfrom typing import Optional\n\nfrom tinymovr.tee import init_tee, destroy_tee\nfrom tinymovr.config import get_bus_config, create_device\n\n\n@flojoy(deps={\"tinymovr\": \"1.6.2\"})\ndef TINYMOVR_SET_VELOCITY(default: Scalar) -> TextBlob:\n    \"\"\"Direct a tinymovr BLDC driver to a set velocity.\n\n    Input\n    -----\n    velocity : Scalar\n        Servo velocity (10k ticks/sec [1, 15]).\n\n    Returns\n    -------\n    Textblob\n        Traceback error (if any)\n    \"\"\"\n\n    tb = \"\"\n    bitrate = 1000000\n    params = get_bus_config([\"canine\", \"slcan_disco\"])\n    params[\"bitrate\"] = bitrate\n    velocity_multiplier = 10000\n    MAX_v = 15\n    MIN_v = 1\n\n    velocity = sorted((MIN_v, default.c, MAX_v))[1]\n\n    try:\n        # Connect to servo over CAN network\n        # TODO: Consider saving Avlos tm Python object in HW device context manager\n        # Reference: https://github.com/tinymovr/avlos\n        with can.Bus(**params) as bus:\n            init_tee(bus)\n            tm = create_device(node_id=1)\n            tm.controller.velocity_mode()\n            tm.controller.velocity.setpoint = velocity * velocity_multiplier\n            destroy_tee()\n    except:\n        tb = traceback.format_exc()\n\n    return TextBlob(text_blob=tb)\n"
}