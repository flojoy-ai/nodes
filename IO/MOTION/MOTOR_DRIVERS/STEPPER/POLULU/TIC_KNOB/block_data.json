{
  "description": "The user controls the motor's rotation with the knob position, specified in the node's parameters.",
  "parameters": [
    {
      "name": "knob_value",
      "type": "int",
      "description": "Defines the position of the motor (rotational movement)."
    },
    {
      "name": "current_limit",
      "type": "int",
      "description": "Defines the current limitation that the stepper motor will receive."
    },
    {
      "name": "sleep_time",
      "type": "int",
      "description": "Defines the sleep time after moving to each position."
    },
    {
      "name": "speed",
      "type": "int",
      "description": "Defines the speed of the motor movement (between 0 and 200000)."
    }
  ],
  "returns": [],
  "code": "from flojoy import flojoy, OrderedPair\nfrom typing import Optional\n\n# Import the TicUSB library to send command to Tic drivers with USB connection\nfrom ticlib import TicUSB\nfrom time import sleep\n\n\n@flojoy(deps={\"ticlib\": \"0.2.2\"})\ndef TIC_KNOB(\n    default: Optional[OrderedPair] = None,\n    knob_value: int = 0,\n    current_limit: int = 30,\n    sleep_time: int = 2,\n    speed: int = 200000,\n) -> OrderedPair:\n    \"\"\"The STEPPER_DRIVER_TIC_KNOB controls a stepper motor's movement with a TIC driver.\n\n    The user controls the motor's rotation with the knob position, specified in the node's parameters.\n\n    Parameters\n    ----------\n    knob_value : int\n        Defines the position of the motor (rotational movement).\n    current_limit : int\n        Defines the current limitation that the stepper motor will receive.\n    sleep_time : int\n        Defines the sleep time after moving to each position.\n    speed : int\n        Defines the speed of the motor movement (between 0 and 200000).\n    \"\"\"\n\n    # Converting the knob value into a position\n    knob_position: int = 2 * knob_value\n\n    # Declaration of the stepper driver (You can add serial number to specify the driver)\n    tic: TicUSB = TicUSB()\n    # Set the current limit for the driver TIC\n    tic.set_current_limit(current_limit)\n    tic.energize()  # Turn on the driver\n    tic.exit_safe_start()  # The driver is now ready to receive commands\n    # Set maximum speed for the motor during first movement.\n    tic.set_max_speed(speed)\n\n    tic.halt_and_set_position(0)  # Set initial position to origin\n    sleep(sleep_time)\n\n    # Set target position for the first movement\n    tic.set_target_position(knob_position)\n    sleep(sleep_time)\n\n    tic.deenergize()\n    tic.enter_safe_start()\n\n    return OrderedPair(x=knob_position, y=speed)\n"
}