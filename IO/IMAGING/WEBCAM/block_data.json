{
  "description": "The selected camera must be opened already using the OPEN_WEBCAM node.",
  "parameters": [
    {
      "name": "connection",
      "type": "Camera",
      "description": "The opened camera connection to use."
    },
    {
      "name": "resolution",
      "type": "select",
      "description": "Camera resolution. Choose from a few options."
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "Image",
      "description": null
    }
  ],
  "code": "import cv2\nfrom flojoy import flojoy, DataContainer, CameraConnection, Image\nfrom typing import Optional, Literal\n\n\n@flojoy(deps={\"opencv-python-headless\": \"4.7.0.72\"}, inject_connection=True)\ndef WEBCAM(\n    connection: CameraConnection,\n    default: Optional[DataContainer] = None,\n    resolution: Literal[\n        \"default\", \"640x360\", \"640x480\", \"1280x720\", \"1920x1080\"\n    ] = \"default\",\n) -> Image:\n    \"\"\"The CAMERA node acquires an image using the selected camera.\n\n    The selected camera must be opened already using the OPEN_WEBCAM node.\n\n    Parameters\n    ----------\n    connection : Camera\n        The opened camera connection to use.\n    resolution : select\n        Camera resolution. Choose from a few options.\n\n    Returns\n    -------\n    Image\n    \"\"\"\n    cam = connection.get_handle()\n\n    try:\n        if resolution != \"default\":\n            resolution = resolution.split(\"x\")\n            try:\n                cam.set(cv2.CAP_PROP_FRAME_WIDTH, int(resolution[0]))\n                cam.set(cv2.CAP_PROP_FRAME_HEIGHT, int(resolution[1]))\n            except cv2.error as camera_error:\n                print(f\"Invalid resolution ({resolution}). Try a lower value.\")\n                raise camera_error\n\n        if not cam.isOpened():\n            raise cv2.error(\"Failed to open camera\")\n\n        result, BGR_img = cam.read()\n\n        if not result:\n            raise cv2.error(\"Failed to capture image\")\n        # cam.release()\n        # del cam\n\n        RGB_img = cv2.cvtColor(BGR_img, cv2.COLOR_BGR2RGB)\n\n        # Split the image channels\n        red_channel = RGB_img[:, :, 0]\n        green_channel = RGB_img[:, :, 1]\n        blue_channel = RGB_img[:, :, 2]\n\n        if RGB_img.shape[2] == 4:\n            alpha_channel = RGB_img[:, :, 3]\n        else:\n            alpha_channel = None\n\n        camera_image = Image(\n            r=red_channel,\n            g=green_channel,\n            b=blue_channel,\n            a=alpha_channel,\n        )\n\n        return camera_image\n\n    except cv2.error as camera_error:\n        raise camera_error\n"
}