{
  "description": "The Keysight 33510B has a variety of waveform settings available.\n\nRequires a CONNECTION_33510B node at the start of the app to connect with\nthe instrument. The VISA address will then be listed under 'connection'.\n\nThis node should also work with compatible Keysight 33XXX wavefunction\ngenerators (although they are untested).",
  "parameters": [
    {
      "name": "connection",
      "type": "VisaConnection",
      "description": "The VISA address (requires the CONNECTION_MDO3XXX node)."
    },
    {
      "name": "on_off",
      "type": "str",
      "description": "Whether to turn the waveform generation to on or off."
    },
    {
      "name": "query_set",
      "type": "str",
      "description": "Whether to query or set the waveform."
    },
    {
      "name": "channel",
      "type": "str",
      "description": "The channel to set or query."
    },
    {
      "name": "waveform",
      "type": "str",
      "description": "The type of waveform to use."
    },
    {
      "name": "frequency",
      "type": "float",
      "description": "The voltage of the waveform to set, in Hz."
    },
    {
      "name": "amplitude",
      "type": "float",
      "description": "The voltage of the waveform to set."
    },
    {
      "name": "amplitude_unit",
      "type": "str",
      "description": "The voltage unit to set the waveform to."
    },
    {
      "name": "phase",
      "type": "float",
      "description": "The phase to set the waveform to, in degrees."
    },
    {
      "name": "offset",
      "type": "float",
      "description": "The voltage offset to set the waveform to, in volts."
    },
    {
      "name": "ramp_symmetry",
      "type": "float",
      "description": "The ramp symmetry if the RAMP waveform is used, in percent."
    },
    {
      "name": "pulse_width",
      "type": "float",
      "description": "The pulse width in nanoseconds if the PULS waveform is used."
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "DataContainer",
      "description": "TextBlob: Summary of waveform generator settings."
    }
  ],
  "code": "from flojoy import flojoy, DataContainer, TextBlob, VisaConnection\nfrom typing import Optional, Literal\n\n\n@flojoy(inject_connection=True)\ndef SET_WAVEFORM_33510B(\n    connection: VisaConnection,\n    on_off: Literal[\"ON\", \"OFF\"] = \"OFF\",\n    query_set: Literal[\"query\", \"set\"] = \"query\",\n    channel: Literal[\"ch1\", \"ch2\"] = \"ch1\",\n    waveform: Literal[\n        \"SIN\", \"SQU\", \"TRI\", \"RAMP\", \"PULS\", \"PRBS\", \"NOIS\", \"ARB\", \"DC\"\n    ] = \"SIN\",\n    frequency: float = 1e6,\n    amplitude: float = 0.1,\n    amplitude_unit: Literal[\"VPP\", \"VRMS\", \"DBM\"] = \"VPP\",\n    phase: float = 0,\n    offset: float = 0,\n    ramp_symmetry: float = 50,\n    pulse_width: float = 20,\n    default: Optional[DataContainer] = None,\n) -> TextBlob:\n    \"\"\"The SET_WAVEFORM_33510B node is used to set waveform settings for a 33510B.\n\n    The Keysight 33510B has a variety of waveform settings available.\n\n    Requires a CONNECTION_33510B node at the start of the app to connect with\n    the instrument. The VISA address will then be listed under 'connection'.\n\n    This node should also work with compatible Keysight 33XXX wavefunction\n    generators (although they are untested).\n\n    Parameters\n    ----------\n    connection: VisaConnection\n        The VISA address (requires the CONNECTION_MDO3XXX node).\n    on_off: str\n        Whether to turn the waveform generation to on or off.\n    query_set: str\n        Whether to query or set the waveform.\n    channel: str\n        The channel to set or query.\n    waveform: str\n        The type of waveform to use.\n    frequency: float\n        The voltage of the waveform to set, in Hz.\n    amplitude: float\n        The voltage of the waveform to set.\n    amplitude_unit: str\n        The voltage unit to set the waveform to.\n    phase: float\n        The phase to set the waveform to, in degrees.\n    offset: float\n        The voltage offset to set the waveform to, in volts.\n    ramp_symmetry: float\n        The ramp symmetry if the RAMP waveform is used, in percent.\n    pulse_width: float\n        The pulse width in nanoseconds if the PULS waveform is used.\n\n    Returns\n    -------\n    DataContainer\n        TextBlob: Summary of waveform generator settings.\n    \"\"\"\n\n    ks = connection.get_handle()\n\n    channel_str = channel\n    channel = getattr(ks, channel)\n\n    if on_off == \"OFF\":\n        channel.output(\"OFF\")\n\n    match query_set:\n        case \"set\":\n            assert (\n                -360.0 <= phase <= 360.0\n            ), \"The phase must be between -360 and 360 degrees.\"\n            assert (\n                0.0 <= ramp_symmetry <= 100.0\n            ), \"The ramp_symmetry must be between -0 and 100.\"\n            assert (\n                pulse_width >= 16\n            ), \"The pulse_width must be greater than or equal to 16 ns\"\n\n            channel.function_type(waveform)\n            channel.amplitude_unit(amplitude_unit)\n            channel.amplitude(amplitude)\n            channel.phase(phase)\n            channel.offset(offset)\n            channel.frequency(frequency)\n            if waveform == \"RAMP\":\n                channel.ramp_symmetry(ramp_symmetry)\n            if waveform == \"PULS\":\n                channel.pulse_width(pulse_width)\n\n            summary = f\"{channel_str}: {waveform}, amplitude: {amplitude} \"\n            summary += f\"{amplitude_unit}, frequency: {frequency} Hz\"\n\n        case \"query\":\n            summary = f\"{channel_str}: \"\n            waveform = channel.function_type()\n            summary += f\"waveform: {waveform}, \\n\"\n            amplitude_unit = channel.amplitude_unit()\n            amplitude = channel.amplitude()\n            summary += f\"amplitude: {amplitude} {amplitude_unit}, \\n\"\n            frequency = channel.frequency()\n            summary += f\"frequency: {frequency} Hz, \\n\"\n            phase = channel.phase()\n            summary += f\"phase: {phase}, \\n\"\n            offset = channel.offset()\n            summary += f\"offset: {offset} V, \\n\"\n            if waveform == \"RAMP\":\n                channel.ramp_symmetry(ramp_symmetry)\n                summary += f\"ramp_symmetry: {ramp_symmetry}%, \\n\"\n            if waveform == \"PULS\":\n                channel.pulse_width(pulse_width)\n                summary += f\"pulse_width: {pulse_width}, \\n\"\n\n    if on_off == \"ON\":\n        channel.output(\"ON\")\n\n    return TextBlob(text_blob=summary)\n"
}