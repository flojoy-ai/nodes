{
  "description": "Requires a CONNECTION_33510B node at the start of the app to connect with\nthe instrument. The VISA address will then be listed under 'connection'.\n\nThis node should also work with compatible Keysight 33XXX wavefunction\ngenerators (although they are untested).",
  "parameters": [
    {
      "name": "connection",
      "type": "VisaConnection",
      "description": "The VISA address (requires the CONNECTION_MDO3XXX node)."
    },
    {
      "name": "on_off",
      "type": "str",
      "description": "Whether to turn the waveform generation to on or off."
    },
    {
      "name": "channel",
      "type": "str",
      "description": "The channel to turn on or off."
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "DataContainer",
      "description": "TextBlob: ON or OFF depending on on_off value."
    }
  ],
  "code": "from flojoy import flojoy, DataContainer, TextBlob, VisaConnection\nfrom typing import Optional, Literal\n\n\n@flojoy(inject_connection=True)\ndef ON_OFF_33510B(\n    connection: VisaConnection,\n    on_off: Literal[\"ON\", \"OFF\"] = \"OFF\",\n    channel: Literal[\"ch1\", \"ch2\"] = \"ch1\",\n    default: Optional[DataContainer] = None,\n) -> TextBlob:\n    \"\"\"The ON_OFF_33510B node is used to turn the output on or off.\n\n    Requires a CONNECTION_33510B node at the start of the app to connect with\n    the instrument. The VISA address will then be listed under 'connection'.\n\n    This node should also work with compatible Keysight 33XXX wavefunction\n    generators (although they are untested).\n\n    Parameters\n    ----------\n    connection: VisaConnection\n        The VISA address (requires the CONNECTION_MDO3XXX node).\n    on_off: str\n        Whether to turn the waveform generation to on or off.\n    channel: str\n        The channel to turn on or off.\n\n    Returns\n    -------\n    DataContainer\n        TextBlob: ON or OFF depending on on_off value.\n    \"\"\"\n\n    ks = connection.get_handle()\n\n    channel_str = channel\n    channel = getattr(ks, channel)\n\n    channel.output(on_off)\n\n    return TextBlob(text_blob=f\"{channel_str}: {on_off}\")\n"
}