{
  "description": "Can only be turned on for one channel.\n\nRequires a CONNECTION_33510B node at the start of the app to connect with\nthe instrument. The VISA address will then be listed under 'connection'.\n\nThis node should also work with compatible Keysight 33XXX wavefunction\ngenerators (although they are untested).",
  "parameters": [
    {
      "name": "connection",
      "type": "VisaConnection",
      "description": "The VISA address (requires the CONNECTION_MDO3XXX node)."
    },
    {
      "name": "on_off",
      "type": "str",
      "description": "Whether to turn the waveform phase syncing on or off."
    },
    {
      "name": "channel",
      "type": "str",
      "description": "The channel to use as the baseline phase."
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "DataContainer",
      "description": "TextBlob: The channel, and ON or OFF depending on on_off value."
    }
  ],
  "code": "from flojoy import flojoy, DataContainer, TextBlob, VisaConnection\nfrom typing import Optional, Literal\n\n\n@flojoy(inject_connection=True)\ndef OUTPUT_SYNC_33510B(\n    connection: VisaConnection,\n    on_off: Literal[\"ON\", \"OFF\"] = \"OFF\",\n    channel: Literal[\"1\", \"2\"] = \"1\",\n    default: Optional[DataContainer] = None,\n) -> TextBlob:\n    \"\"\"The OUTPUT_SYNC_33510B node is used sync multiple outputs phases.\n\n    Can only be turned on for one channel.\n\n    Requires a CONNECTION_33510B node at the start of the app to connect with\n    the instrument. The VISA address will then be listed under 'connection'.\n\n    This node should also work with compatible Keysight 33XXX wavefunction\n    generators (although they are untested).\n\n    Parameters\n    ----------\n    connection: VisaConnection\n        The VISA address (requires the CONNECTION_MDO3XXX node).\n    on_off: str\n        Whether to turn the waveform phase syncing on or off.\n    channel: str\n        The channel to use as the baseline phase.\n\n    Returns\n    -------\n    DataContainer\n        TextBlob: The channel, and ON or OFF depending on on_off value.\n    \"\"\"\n\n    ks = connection.get_handle()\n\n    ks.sync.source(int(channel))\n    match on_off:\n        case \"OFF\":\n            ks.sync.output(\"OFF\")\n        case \"ON\":\n            ks.sync.output(\"ON\")\n            ks.write(\"PHAS:SYNC\")\n\n    return TextBlob(text_blob=f\"CH{channel} sync: {on_off}\")\n"
}