{
  "description": "Requires a CONNECTION_MDO3XXX node at the start of the app to connect with\nthe instrument. The VISA address will then be listed under 'connection'.\n\nThis node should also work with compatible Tektronix scopes (untested):\nMDO4xxx, MSO4xxx, and DPO4xxx.",
  "parameters": [
    {
      "name": "connection",
      "type": "VisaConnection",
      "description": "The VISA address (requires the CONNECTION_MDO3XXX node)."
    },
    {
      "name": "channel",
      "type": "int",
      "description": "The channel to set as the triggering channel (used if set=True)."
    },
    {
      "name": "query_set",
      "type": "str",
      "description": "Whether to query or set the triggering channel."
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "DataContainer",
      "description": "TextBlob: The triggering channel (e.g. CH1)."
    }
  ],
  "code": "from flojoy import flojoy, DataContainer, TextBlob, VisaConnection\nfrom typing import Optional, Literal\n\n\n@flojoy(inject_connection=True)\ndef TRIGGER_CHANNEL_MDO3XXX(\n    connection: VisaConnection,\n    channel: int = 0,\n    query_set: Literal[\"query\", \"set\"] = \"query\",\n    default: Optional[DataContainer] = None,\n) -> TextBlob:\n    \"\"\"The TRIGGER_CHANNEL_MDO3XXX node sets the triggering channel (or queries it).\n\n    Requires a CONNECTION_MDO3XXX node at the start of the app to connect with\n    the instrument. The VISA address will then be listed under 'connection'.\n\n    This node should also work with compatible Tektronix scopes (untested):\n    MDO4xxx, MSO4xxx, and DPO4xxx.\n\n    Parameters\n    ----------\n    connection: VisaConnection\n        The VISA address (requires the CONNECTION_MDO3XXX node).\n    channel: int\n        The channel to set as the triggering channel (used if set=True).\n    query_set: str\n        Whether to query or set the triggering channel.\n\n    Returns\n    -------\n    DataContainer\n        TextBlob: The triggering channel (e.g. CH1).\n    \"\"\"\n\n    tek = connection.get_handle()\n\n    match query_set:\n        case \"query\":\n            s = tek.trigger.source()\n        case \"set\":\n            tek.trigger.source(f\"CH{1 + channel}\")\n            s = f\"CH{1 + channel}\"\n\n    return TextBlob(text_blob=s)\n"
}