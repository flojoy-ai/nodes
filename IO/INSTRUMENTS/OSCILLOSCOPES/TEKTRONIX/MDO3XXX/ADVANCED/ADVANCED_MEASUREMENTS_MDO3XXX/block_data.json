{
  "description": "This node is similar to MEASUREMENTS_MDO3XXX node but more measurements\nare availble. The available measurements are as follows:\n\namplitude, area, burst, carea, cmean, crms, delay, distduty, extinctdb,\nextinctpct, extinctratio, eyeheight, eyewidth, fall, frequency, high, hits,\nlow, maximum, mean, median, minimum, ncross, nduty, novershoot, nwidth,\npbase, pcross, pctcross, pduty, peakhits, period, phase, pk2pk, pkpkjitter,\npkpknoise, povershoot, ptop, pwidth, qfactor, rise, rms, rmsjitter,\nrmsnoise, sigma1, sigma2, sigma3, sixsigmajit, snratio, stddev, undefined,\nwaveforms\n\nAlso available are 5 statistic modes:\ninstant, mean, max, min, and stdev where instant is a single measurement\nand stdev is the standard deviation of the mean.\n\nRequires a CONNECTION_MDO3XXX node at the start of the app to connect with\nthe instrument. The VISA address will then be listed under 'connection'.\n\nThis node should also work with compatible Tektronix scopes (untested):\nMDO4xxx, MSO4xxx, and DPO4xxx. Many of the advanced measurements are likely\nto not function with different model numbers.",
  "parameters": [
    {
      "name": "connection",
      "type": "VisaConnection",
      "description": "The VISA address (requires the CONNECTION_MDO3XXX node)."
    },
    {
      "name": "channel",
      "type": "int",
      "description": "The channel with which to create a measurement for."
    },
    {
      "name": "measurement",
      "type": "str",
      "description": "The measurement to make."
    },
    {
      "name": "statistic",
      "type": "str",
      "description": "The type of statistic to take for the measurement."
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "DataContainer",
      "description": "Scalar: The measurement from the oscilloscope channel."
    }
  ],
  "code": "from flojoy import flojoy, DataContainer, Scalar, VisaConnection\nfrom typing import Optional, Literal\n\n\n@flojoy(inject_connection=True)\ndef ADVANCED_MEASUREMENTS_MDO3XXX(\n    connection: VisaConnection,\n    channel: int = 0,\n    measurement: str = \"period\",\n    statistic: Literal[\"instant\", \"mean\", \"max\", \"min\", \"stdev\"] = \"instant\",\n    default: Optional[DataContainer] = None,\n) -> Scalar:\n    \"\"\"The ADVANCED_MEASUREMENTS_MDO3XXX node extracts waveform measurements from an MDO3xxx oscilloscope.\n\n    This node is similar to MEASUREMENTS_MDO3XXX node but more measurements\n    are availble. The available measurements are as follows:\n\n    amplitude, area, burst, carea, cmean, crms, delay, distduty, extinctdb,\n    extinctpct, extinctratio, eyeheight, eyewidth, fall, frequency, high, hits,\n    low, maximum, mean, median, minimum, ncross, nduty, novershoot, nwidth,\n    pbase, pcross, pctcross, pduty, peakhits, period, phase, pk2pk, pkpkjitter,\n    pkpknoise, povershoot, ptop, pwidth, qfactor, rise, rms, rmsjitter,\n    rmsnoise, sigma1, sigma2, sigma3, sixsigmajit, snratio, stddev, undefined,\n    waveforms\n\n    Also available are 5 statistic modes:\n    instant, mean, max, min, and stdev where instant is a single measurement\n    and stdev is the standard deviation of the mean.\n\n    Requires a CONNECTION_MDO3XXX node at the start of the app to connect with\n    the instrument. The VISA address will then be listed under 'connection'.\n\n    This node should also work with compatible Tektronix scopes (untested):\n    MDO4xxx, MSO4xxx, and DPO4xxx. Many of the advanced measurements are likely\n    to not function with different model numbers.\n\n    Parameters\n    ----------\n    connection: VisaConnection\n        The VISA address (requires the CONNECTION_MDO3XXX node).\n    channel: int\n        The channel with which to create a measurement for.\n    measurement: str\n        The measurement to make.\n    statistic: str\n        The type of statistic to take for the measurement.\n\n    Returns\n    -------\n    DataContainer\n        Scalar: The measurement from the oscilloscope channel.\n    \"\"\"\n\n    measures = {\n        \"amplitude\",\n        \"area\",\n        \"burst\",\n        \"carea\",\n        \"cmean\",\n        \"crms\",\n        \"delay\",\n        \"distduty\",\n        \"extinctdb\",\n        \"extinctpct\",\n        \"extinctratio\",\n        \"eyeheight\",\n        \"eyewidth\",\n        \"fall\",\n        \"frequency\",\n        \"high\",\n        \"hits\",\n        \"low\",\n        \"maximum\",\n        \"mean\",\n        \"median\",\n        \"minimum\",\n        \"ncross\",\n        \"nduty\",\n        \"novershoot\",\n        \"nwidth\",\n        \"pbase\",\n        \"pcross\",\n        \"pctcross\",\n        \"pduty\",\n        \"peakhits\",\n        \"period\",\n        \"phase\",\n        \"pk2pk\",\n        \"pkpkjitter\",\n        \"pkpknoise\",\n        \"povershoot\",\n        \"ptop\",\n        \"pwidth\",\n        \"qfactor\",\n        \"rise\",\n        \"rms\",\n        \"rmsjitter\",\n        \"rmsnoise\",\n        \"sigma1\",\n        \"sigma2\",\n        \"sigma3\",\n        \"sixsigmajit\",\n        \"snratio\",\n        \"stddev\",\n        \"undefined\",\n        \"waveforms\",\n    }\n\n    assert (\n        measurement in measures\n    ), f\"The select measurement ({measurement}) is not availble.\"\n\n    tek = connection.get_handle()\n\n    tek.measurement[0].source1(f\"CH{int(channel + 1)}\")\n\n    measurement = getattr(tek.measurement[0], measurement)\n\n    if statistic == \"instant\":\n        value = measurement()\n    else:\n        measurement = getattr(measurement, statistic)\n        value = measurement()\n\n    return Scalar(c=value)\n"
}