{
  "description": "Note: If both the file_url and default are not specified when file_type=\"Image\", a default image will be loaded.\n\nFor now, REMOTE_FILE only supports HTTP file URLs, in particular GCP URL (starting with gcp://). S3 URL (starting with s3://) and other bucket-like URLs are not supported.\n\nIf the file url is not specified and the default input is not connected, or if the file url is not a valid URL, a ValueError is raised.",
  "parameters": [
    {
      "name": "file_url",
      "type": "str",
      "description": "URL of the file to be loaded."
    },
    {
      "name": "default",
      "type": "Optional[TextBlob]",
      "description": "If this input node is connected, the file URL will be taken from\nthe output of the connected node.\nTo be used in conjunction with batch processing."
    },
    {
      "name": "file_type",
      "type": "str",
      "description": "Type of file to load, default = image."
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "Image|DataFrame",
      "description": "Image for file_type 'image'.\nDataFrame for file_type 'json', 'csv', 'excel', 'xml'."
    }
  ],
  "code": "from urllib.parse import urlparse\n\nfrom flojoy import flojoy, Image, DataFrame, Grayscale, TextBlob\nfrom typing import Literal, Optional\nimport numpy as np\nfrom PIL import Image as PIL_Image\nimport pandas as pd\n\nimport requests\nfrom io import BytesIO\n\n\ndef get_file_url(url: str):\n    parse_result = urlparse(url)\n    if not all([parse_result.scheme, parse_result.netloc]):\n        raise ValueError(f\"'{url}' is not a valid URL.\")\n    return url\n\n\n# TODO: Consolidate remote files (S3, HTTP, etc...) and perhaps even merge REMOTE_FILE AND LOCAL_FILE in a single node.\n@flojoy(\n    deps={\n        \"xlrd\": \"2.0.1\",\n        \"lxml\": \"4.9.2\",\n        \"openpyxl\": \"3.0.10\",\n        \"scikit-image\": \"0.21.0\",\n    }\n)\ndef REMOTE_FILE(\n    file_url: str = None,\n    default: Optional[TextBlob] = None,\n    file_type: Literal[\"Image\", \"Grayscale\", \"JSON\", \"CSV\", \"Excel\", \"XML\"] = \"Image\",\n) -> Image | DataFrame:\n    \"\"\"The REMOTE_FILE node loads a remote file using an HTTP URL and converts it to a DataContainer class.\n\n    Note: If both the file_url and default are not specified when file_type=\"Image\", a default image will be loaded.\n\n    For now, REMOTE_FILE only supports HTTP file URLs, in particular GCP URL (starting with gcp://). S3 URL (starting with s3://) and other bucket-like URLs are not supported.\n\n    If the file url is not specified and the default input is not connected, or if the file url is not a valid URL, a ValueError is raised.\n\n    Parameters\n    ----------\n    file_url : str\n        URL of the file to be loaded.\n    default : Optional[TextBlob]\n        If this input node is connected, the file URL will be taken from\n        the output of the connected node.\n        To be used in conjunction with batch processing.\n    file_type : str\n        Type of file to load, default = image.\n\n    Returns\n    -------\n    Image|DataFrame\n        Image for file_type 'image'.\n        DataFrame for file_type 'json', 'csv', 'excel', 'xml'.\n    \"\"\"\n\n    file_url = default.text_blob if default else file_url\n    file_url = \"\" if file_url is None else file_url\n\n    match file_type:\n        case \"Image\":\n            file_url = get_file_url(file_url)\n            response = requests.get(file_url)\n            f = PIL_Image.open(BytesIO(response.content))\n            img_array = np.array(f.convert(\"RGBA\"))\n            red_channel = img_array[:, :, 0]\n            green_channel = img_array[:, :, 1]\n            blue_channel = img_array[:, :, 2]\n            if img_array.shape[2] == 4:\n                alpha_channel = img_array[:, :, 3]\n            else:\n                alpha_channel = None\n            return Image(\n                r=red_channel,\n                g=green_channel,\n                b=blue_channel,\n                a=alpha_channel,\n            )\n        case \"Grayscale\":\n            import skimage.io\n\n            file_url = get_file_url(file_url)\n            return Grayscale(img=skimage.io.imread(file_url, as_gray=True))\n        case \"CSV\":\n            file_url = get_file_url(file_url)\n            df = pd.read_csv(file_url)\n            return DataFrame(df=df)\n        case \"JSON\":\n            file_url = get_file_url(file_url)\n            df = pd.read_json(file_url)\n            return DataFrame(df=df)\n        case \"XML\":\n            file_url = get_file_url(file_url)\n            df = pd.read_xml(file_url)\n            return DataFrame(df=df)\n        case \"Excel\":\n            file_url = get_file_url(file_url)\n            df = pd.read_excel(file_url)\n            return DataFrame(df=df)\n"
}