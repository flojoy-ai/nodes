{
  "description": "When a constant is divided into an array or matrix, each element in the array or matrix will be divided by the constant value.\n\nInputs\n------\na : OrderedPair|Scalar|Vector\n    The input that will be divide by b.\nb : OrderedPair|Scalar|Vector\n    The input that will divide a.",
  "parameters": [],
  "returns": [
    {
      "name": null,
      "type": "OrderedPair|Scalar|Vector",
      "description": "OrderedPair if a is an OrderedPair.\nx: the x-axis of input a.\ny: the result of the division of input a by input b.\n\nScalar if a is a Scalar.\nc: the result of the division of input a by input b.\n\nVector if a is a Vector.\nv: the result of the division of input a by input b."
    }
  ],
  "code": "import numpy as np\nfrom flojoy import flojoy, OrderedPair, Scalar, Vector\nfrom nodes.TRANSFORMERS.ARITHMETIC.utils.arithmetic_utils import get_val\nfrom functools import reduce\n\n\n@flojoy\ndef DIVIDE(\n    a: OrderedPair | Scalar | Vector, b: list[OrderedPair | Scalar | Vector]\n) -> OrderedPair | Scalar | Vector:\n    \"\"\"The DIVIDE node divides two or more numeric arrays, matrices, dataframes, or constants element-wise.\n\n    When a constant is divided into an array or matrix, each element in the array or matrix will be divided by the constant value.\n\n    Inputs\n    ------\n    a : OrderedPair|Scalar|Vector\n        The input that will be divide by b.\n    b : OrderedPair|Scalar|Vector\n        The input that will divide a.\n\n    Returns\n    -------\n    OrderedPair|Scalar|Vector\n        OrderedPair if a is an OrderedPair.\n        x: the x-axis of input a.\n        y: the result of the division of input a by input b.\n\n        Scalar if a is a Scalar.\n        c: the result of the division of input a by input b.\n\n        Vector if a is a Vector.\n        v: the result of the division of input a by input b.\n    \"\"\"\n\n    initial = get_val(a)\n    seq = map(lambda dc: get_val(dc), b)\n    y = reduce(lambda u, v: np.divide(u, v), seq, initial)\n\n    match a:\n        case OrderedPair():\n            return OrderedPair(x=a.x, y=y)\n        case Vector():\n            return Vector(v=y)\n        case Scalar():\n            return Scalar(c=y)\n"
}