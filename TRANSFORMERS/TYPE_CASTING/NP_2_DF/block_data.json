{
  "description": "Inputs\n------\ndefault : DataContainer\n    The input numpy array which we apply the conversion to.",
  "parameters": [],
  "returns": [
    {
      "name": null,
      "type": "DataFrame",
      "description": "The dataframe result from the conversion of the input."
    }
  ],
  "code": "import pandas as pd\nimport numpy as np\nfrom flojoy import (\n    flojoy,\n    DataContainer,\n    DataFrame,\n    OrderedPair,\n    OrderedTriple,\n    Matrix,\n    Grayscale,\n    Image,\n    ParametricDataFrame,\n    ParametricOrderedPair,\n    ParametricOrderedTriple,\n    ParametricImage,\n    ParametricGrayscale,\n    ParametricMatrix,\n)\n\n\n@flojoy\ndef NP_2_DF(default: DataContainer) -> DataFrame:\n    \"\"\"The NP_2_DF node converts numpy array data into dataframe type data.\n\n    Inputs\n    ------\n    default : DataContainer\n        The input numpy array which we apply the conversion to.\n\n    Returns\n    -------\n    DataFrame\n        The dataframe result from the conversion of the input.\n    \"\"\"\n\n    match default:\n        case DataFrame() | ParametricDataFrame():\n            return default\n\n        case OrderedPair() | ParametricOrderedPair():\n            df = pd.DataFrame(default.y)\n            return DataFrame(df=df)\n\n        case OrderedTriple() | ParametricOrderedTriple():\n            df = pd.DataFrame(default.z)\n            return DataFrame(df=df)\n\n        case Matrix() | ParametricMatrix():\n            np_array = np.asarray(default.m)\n            df = pd.DataFrame(np_array)\n            return DataFrame(df=df)\n        case Grayscale() | ParametricGrayscale():\n            np_array = np.asarray(default.m)\n            df = pd.DataFrame(np_array)\n            return DataFrame(df=df)\n\n        case Image() | ParametricImage():\n            red = default.r\n            green = default.g\n            blue = default.b\n\n            if default.a is None:\n                merge = np.stack((red, green, blue), axis=2)\n                merge = merge.reshape(-1, merge.shape[-1])\n                df = pd.DataFrame(merge)\n                return DataFrame(df=df)\n            else:\n                alpha = default.a\n                merge = np.stack((red, green, blue, alpha), axis=2)\n                merge = merge.reshape(-1, merge.shape[-1])\n                df = pd.DataFrame(merge)\n                return DataFrame(df=df)\n        case _:\n            raise ValueError(f\"unsupported DataContainer type passed for NP_2_DF\")\n"
}