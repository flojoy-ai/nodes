{
  "description": "It takes one dataframe type data and selects 3 different columns to generate the OrderedTriple type.\n\nInputs\n------\ndefault : DataFrame\n    The input dataframe to which we apply the conversion to.",
  "parameters": [
    {
      "name": "x",
      "type": "int",
      "description": "The index of the column that represents the x-axis."
    },
    {
      "name": "y",
      "type": "int",
      "description": "The index of the column that represents the y-axis."
    },
    {
      "name": "z",
      "type": "int",
      "description": "The index of the column that represents the z-axis."
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "OrderedTriple",
      "description": "The OrderedTriple result from the conversion of the input."
    }
  ],
  "code": "from flojoy import flojoy, DataFrame, OrderedTriple\n\n\n@flojoy\ndef DF_2_ORDERED_TRIPLE(\n    default: DataFrame, x: int = 0, y: int = 1, z: int = 2\n) -> OrderedTriple:\n    \"\"\"The DF_2_ORDERED_TRIPLE node converts a dataframe type data into an OrderedTriple type data.\n\n    It takes one dataframe type data and selects 3 different columns to generate the OrderedTriple type.\n\n    Inputs\n    ------\n    default : DataFrame\n        The input dataframe to which we apply the conversion to.\n\n    Parameters\n    ----------\n    x : int\n        The index of the column that represents the x-axis.\n    y : int\n        The index of the column that represents the y-axis.\n    z : int\n        The index of the column that represents the z-axis.\n\n    Returns\n    -------\n    OrderedTriple\n        The OrderedTriple result from the conversion of the input.\n    \"\"\"\n\n    df = default.m\n    if df.shape[1] < 3:\n        raise AssertionError(\n            f\"The DataFrame needs to have a shape greater than 2 in order to be converted to the OrderedTriple type, got: {df.shape[1]}\"\n        )\n\n    x_list = df.iloc[:, x]\n    y_list = df.iloc[:, y]\n    z_list = df.iloc[:, z]\n\n    x_numpy = x_list.to_numpy(dtype=object)\n    y_numpy = y_list.to_numpy(dtype=object)\n    z_numpy = z_list.to_numpy(dtype=object)\n\n    return OrderedTriple(x=x_numpy, y=y_numpy, z=z_numpy)\n"
}