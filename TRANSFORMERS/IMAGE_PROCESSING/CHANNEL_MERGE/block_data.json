{
  "description": null,
  "parameters": [],
  "returns": [
    {
      "name": null,
      "type": "Image",
      "description": "The image with each channel given by the appropriate channel\non the respective inputs."
    }
  ],
  "code": "from flojoy import flojoy, Image\nimport numpy as np\n\n\n@flojoy\ndef CHANNEL_MERGE(red: Image, green: Image, blue: Image, alpha: Image) -> Image:\n    \"\"\"The CHANNEL_MERGE node returns the merged rgba channels of an image.\n\n    Returns\n    -------\n    Image\n        The image with each channel given by the appropriate channel\n        on the respective inputs.\n    \"\"\"\n\n    try:\n        r = red.r\n        b = blue.b\n        g = green.g\n        a = alpha.a\n\n        zeros = np.zeros(r.shape, np.uint8)\n        ones = 255 * np.ones(r.shape, np.uint8)\n\n        if not (\n            np.array_equal(red.g, zeros)\n            and np.array_equal(red.b, zeros)\n            and np.array_equal(red.a, ones)\n        ):\n            raise ValueError(\"Red input had nonzero values for the other channels.\")\n\n        if not (\n            np.array_equal(blue.r, zeros)\n            and np.array_equal(blue.g, zeros)\n            and np.array_equal(blue.a, ones)\n        ):\n            raise ValueError(\"Blue input had nonzero values for the other channels.\")\n\n        if not (\n            np.array_equal(green.r, zeros)\n            and np.array_equal(green.b, zeros)\n            and np.array_equal(green.a, ones)\n        ):\n            raise ValueError(\"Green input had nonzero values for the other channels.\")\n\n        if not (\n            np.array_equal(alpha.r, zeros)\n            and np.array_equal(alpha.b, zeros)\n            and np.array_equal(alpha.b, zeros)\n        ):\n            raise ValueError(\"Alpha input had nonzero values for the other channels.\")\n\n        return Image(r=r, b=b, g=g, a=a)\n    except Exception as e:\n        raise e\n"
}