{
  "description": "This is done through the Pillow image filter, FIND_EDGES.\n\nNote that the image is converted to greyscale during this processing.\n\nInputs\n------\ndefault : Image\n    The input image to apply edge detection to.",
  "parameters": [],
  "returns": [
    {
      "name": null,
      "type": "Image",
      "description": "The image with detected edges in white."
    }
  ],
  "code": "from flojoy import flojoy, Image\nimport cv2\nimport numpy as np\nfrom PIL import ImageFilter, Image as PILImage\n\n\n@flojoy(deps={\"opencv-python\": \"4.8.0\"})\ndef EDGE_DETECTION(default: Image) -> Image:\n    \"\"\"The EDGE_DETECTION node detects edges in the image that was passed to it.\n\n    This is done through the Pillow image filter, FIND_EDGES.\n\n    Note that the image is converted to greyscale during this processing.\n\n    Inputs\n    ------\n    default : Image\n        The input image to apply edge detection to.\n\n    Returns\n    -------\n    Image\n        The image with detected edges in white.\n    \"\"\"\n\n    r = default.r\n    g = default.g\n    b = default.b\n    a = default.a\n\n    if a is not None:\n        rgba_image = np.stack((r, g, b, a), axis=2)\n\n    else:\n        rgba_image = np.stack((r, g, b), axis=2)\n\n    try:\n        image = PILImage.fromarray(rgba_image)\n        image = image.convert(\"L\").filter(ImageFilter.FIND_EDGES).convert(\"RGB\")\n        image = np.array(image)\n\n        try:\n            r, g, b, a = cv2.split(image)\n        except:\n            r, g, b = cv2.split(image)\n        if a is None:\n            a = None\n        return Image(\n            r=r,\n            g=g,\n            b=b,\n            a=a,\n        )\n    except Exception as e:\n        raise e\n"
}