{
  "description": "The ability to find local peaks will not depend on the extrema being\n    exponentially separated from the neighboring values, or some other restrictive constraint.\n\n    We implement three algorithms to find the local max. The first algorithm uses a masked phase\n    cross correlation technique [1], while the second uses the persistence birth/death algorithms [2, 3].\n    The original implementations of these libraries were utilized for the detection of elastic\n    scattering peaks in diffraction data, found in the 'scikit-ued' library of Python [4].\n\n    Note that the algorithm assumes that the extrema are symmetrically distributed around\n    a center point. All extrema are determined relative to the center position.\n    Also, for closely spaced points, noisy data, or data that has a very high dynamic range, the\n    algorithm fails. Therefore, this approach is suited only for images with\n    high degrees of symmetry and reasonable contrast.\n\n    Therefore, we also use the second prominence algorithm, where a single\n    value is applied locally to determine the relative 'peakiness' of a given pixel,\n    inspecting only the neighbors around that given pixel. While computationally\n    more intense for images with a resolution of >4K, it produces extremely accurate\n    results for the correct value of prominence in potentially low-contrast images.\n    By definition, it is a local pixel algorithm, and therefore does not perform any blob detection,\n    unlike the high-symmetry algorithm which creates high contrast in\n    the image with laplacian filtering, and identifies regions of this high contrast image.\n\n    Note, however, that the persistence algorithm tends to find more points than what are actually there.\n    For images with high frequency components (i.e. quickly varying values among the third nearest neighbours),\n    the algorithm will tend to identify each as a 'peak', even though the local maxima is elsewhere. This\n    therefore assumes that the image has been properly preprocessed with another image processing node to\n    provide a sufficient low-frequency image such that the prominence of each pixel is well defined.\n\n    To combat this limitation, we present the most robust of the algorithms that should work on images\n    of low or high contrast, low or high frequency components, and of low or high dynamic range. It is\n    computationally more expensive, as it involves repeated convolutions of the image, but it is\n    the most reliable of the methods for a general image.\n\n    This routine is known as the Laplacian of Gaussian algorithm [5].\n    The key to this algorithm is to apply a filter specially chosen such that regions around peaks have high\n    levels of contrast (essentially binarize the image around its peak so that near the peak, the\n    image is one, and zero otherwise). To achieve such a filter, the Laplacian of a Gaussian is used:\n\n    .. math:: \nabla^2 L \\equiv L_{xx} + L_{yy}\n\n    which yields the following filter (for a Gaussian of width sigma, centered at the origin):\n\n    ..math :: LG = -\frac{1}{\\pi\\sigma^4}\big[1-\frac{x^2+y^2}{2\\sigma^2}\big]e^{-\frac{x^2+y^2}{2\\sigma^2}}\n\n    The output of this filter will be a maximum where there is an edge from a peak, the maximum response\n    of which is given for 1.41*'blob radius' around the peak.\n    Applying this filter repeatedly with varying degrees of sigma, will continue to refine the edges around\n    the peak until the image is essentially binarized around the peaks. Due to the repeated convolutions,\n    this algorithm is generally expensive, but specific methods have been implemented using FFT to speed\n    up these calculations.\n\n\n    Parameters\n    ----------\n\n    default : Image | Grayscale | Matrix\n        The input DataContainer that contains the image to be processed.\n        Can either be RGBA, greyscale, or a matrix type.\n        In the case of RGB(A), the image is flattened to grayscale for the peak detection.\n    image_mask : Grayscale | Matrix\n        This object provides a mask to apply to the peak finding routines.\n        Peaks found by any algorithm inside this mask are ignored.\n        Should be of a datatype that can be static cast to booleans.\n        If none, it is assumed that the entire image is valid for peak detection.\n    center : list[int]\n        For the high symmetry algorithm, this provides the center of symmetry\n        to pass to the cross correlation routines.\n        If none is provided, an autocenter routine is run to attempt to find the center of symmetry.\n    min_dist : float\n        The minimum distance between peaks.\n        If the L2 distance (in pixels) of any pair of peaks is less than min_dist,\n        they are considered to be the same, and one is discarded.\n        This parameter applies to all algorithms.\n    algorithm : str\n        The name of the algorithm to use.\n    prominence : float\n        In the prominence and Laplacian of Gaussian algorithms, this defines the threshold\n        above or below which objects must pass in order to be considered a peak.\n        Does not apply to the high_symmetry algorithm.\n    k : float\n        This specifies the scaling of Gaussian filters between successive applications\n        of Gaussian filters of increasing sigma.\n        Default is chosen for ideal spherically symmetric peaks.\n        Can be tuned for more bizarre looking peak structures.\n        Applies only to the Laplacian of Gaussian algorithm.\n    sigma : float\n        The baseline standard deviation of the Gaussian filters,\n        only for the Laplacian of Gaussian algorithm.\n    max_power : int\n        Describes the upper limit of the degree of exponentiation for the successive\n        application of filters, only in the Laplacian of Gaussian algorithm.\n\n    Returns\n    -------\n    fig : Plotly\n        The Plotly figure so that the image can be visualized with its found peaks.\n    blobs : Grayscale\n        A blob mask that returns the regions around the found peaks.\n        It is only valid for the high_symmetry and log routines.\n        As the persistence algorithm is by definition hyperlocal, it has no notion of blobs\n        throughout the detection process, and as such returns a unity mask.\n\n    References\n    ----------\n    [1] Liu, Lai Chung. Chemistry in Action: Making Molecular Movies with Ultrafast\n    Electron Diffraction and Data Science, Chapter 2. Springer Nature, 2020.\n\n    [2] Huber, S. (2021). Persistent Homology in Data Science. In: Haber, P.,\n    Lampoltshammer, T., Mayr, M., Plankensteiner, K. (eds) Data Science - Analytics\n    and Applications. Springer Vieweg, Wiesbaden.\n    https://doi.org/10.1007/978-3-658-32182-6_13\n\n    [3] Edelsbrunner, H. and John L Harer (2010). Computational Topology. In: American\n    Mathematical Society.\n\n    [4] L. P. Ren\u00e9 de Cotret, M. R. Otto, M. J. Stern. and B. J. Siwick.\n    An open-source software ecosystem for the interactive exploration of\n    ultrafast electron scattering data, Advanced Structural and Chemical\n    Imaging 4:11 (2018)\n\n    [5] https://en.wikipedia.org/wiki/Blob_detection#The_Laplacian_of_Gaussian",
  "parameters": [],
  "returns": []
}