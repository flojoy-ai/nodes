{
  "description": "Note: For \"gaussian\" and \"median\" type, you are only allowed an odd number for the kernel value.\n\nSee https://docs.opencv.org/4.x/d4/d13/tutorial_py_filtering.html for smoothing function information.\n\nInputs\n------\ndefault : Image\n    The input image to apply smoothing to.",
  "parameters": [
    {
      "name": "kernel",
      "type": "int",
      "description": "The strength of the smoothing (larger = stronger smoothing)."
    },
    {
      "name": "smoothing_type",
      "type": "select",
      "description": "The type of smoothing function to use."
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "Image",
      "description": "The smoothed image."
    }
  ],
  "code": "from flojoy import flojoy, Image\nimport cv2\nimport numpy as np\nfrom typing import Literal\n\n\n@flojoy(deps={\"opencv-python\": \"4.8.0.76\"})\ndef IMAGE_SMOOTHING(\n    default: Image,\n    kernel: int = 5,\n    smoothing_type: Literal[\"average\", \"gaussian\", \"median\", \"bilateral\"] = \"average\",\n) -> Image:\n    \"\"\"The IMAGE_SMOOTHING node applies an image smoothing operation on the input DataContainer class, specifically for the 'image' type, represented by the RGB(A) channels.\n\n    Note: For \"gaussian\" and \"median\" type, you are only allowed an odd number for the kernel value.\n\n    See https://docs.opencv.org/4.x/d4/d13/tutorial_py_filtering.html for smoothing function information.\n\n    Inputs\n    ------\n    default : Image\n        The input image to apply smoothing to.\n\n    Parameters\n    ----------\n    kernel : int\n        The strength of the smoothing (larger = stronger smoothing).\n    smoothing_type : select\n        The type of smoothing function to use.\n\n    Returns\n    -------\n    Image\n        The smoothed image.\n    \"\"\"\n\n    r = default.r\n    g = default.g\n    b = default.b\n    a = default.a\n\n    if a is not None:\n        rgba_image = np.stack((r, g, b, a), axis=2)\n    else:\n        rgba_image = np.stack((r, g, b), axis=2)\n\n    try:\n        match smoothing_type:\n            case \"average\":\n                image = cv2.blur(rgba_image, (kernel, kernel))\n            case \"gaussian\":\n                assert kernel & 1, \"Kernel must be odd for 'gaussian' smoothing.\"\n                image = cv2.GaussianBlur(rgba_image, (kernel, kernel), 0)\n            case \"median\":\n                assert kernel & 1, \"Kernel must be odd for 'median' smoothing.\"\n                image = cv2.medianBlur(rgba_image, kernel)\n            case \"bilateral\":\n                rgba_image = cv2.cvtColor(rgba_image, cv2.COLOR_BGRA2BGR)\n                image = cv2.bilateralFilter(rgba_image, kernel, kernel * 5, kernel * 5)\n        try:\n            r, g, b, a = cv2.split(image)\n        except:\n            r, g, b = cv2.split(image)\n        if a is None:\n            a = None\n        return Image(\n            r=r,\n            g=g,\n            b=b,\n            a=a,\n        )\n    except Exception as e:\n        raise e\n"
}