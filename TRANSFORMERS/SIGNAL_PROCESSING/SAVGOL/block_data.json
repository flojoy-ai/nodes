{
  "description": "The default behaviour is to implement a 3-point moving average of the data.\n\nInputs\n------\ndefault : OrderedPair\n    The data to apply the numpy savgol filter to.",
  "parameters": [
    {
      "name": "window_length",
      "type": "int",
      "description": "the length of the filter window, must be less than or equal to the size of the input"
    },
    {
      "name": "poly_order",
      "type": "int",
      "description": "the order of the polynomial used to fit the samples, must be less than or equal to the size of window_length"
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "OrderedPair",
      "description": "x: time axis\ny: filtered signal"
    }
  ],
  "code": "import scipy\nfrom flojoy import flojoy, OrderedPair\nimport warnings\n\n\n@flojoy\ndef SAVGOL(\n    default: OrderedPair, window_length: int = 50, poly_order: int = 1\n) -> OrderedPair:\n    \"\"\"The SAVGOL node applies a Savitzky-Golay filter to an input signal. It is generally used for smoothing data.\n\n    The default behaviour is to implement a 3-point moving average of the data.\n\n    Inputs\n    ------\n    default : OrderedPair\n        The data to apply the numpy savgol filter to.\n\n    Parameters\n    ----------\n    window_length : int\n        the length of the filter window, must be less than or equal to the size of the input\n    poly_order : int\n        the order of the polynomial used to fit the samples, must be less than or equal to the size of window_length\n\n    Returns\n    -------\n    OrderedPair\n        x: time axis\n        y: filtered signal\n    \"\"\"\n\n    signal = default.y\n    if window_length >= len(default.y):\n        warnings.warn(\n            \"Polynomial order is greater than the window size. Using p=w-1...\"\n        )\n        poly_order = len(default.y) - 1\n\n    if poly_order >= window_length:\n        warnings.warn(\n            \"Polynomial order is greater than the window size. Using p=w-1...\"\n        )\n        poly_order = window_length - 1\n\n    filtered = scipy.signal.savgol_filter(signal, window_length, poly_order)\n    return OrderedPair(x=default.x, y=filtered)\n"
}