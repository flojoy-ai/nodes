{
  "description": "Inputs\n------\ndefault : OrderedPair|Vector\n    Input from which we get the two lists we use in the integration.",
  "parameters": [],
  "returns": [
    {
      "name": null,
      "type": "OrderedPair",
      "description": "x: the x-axis of the input.\ny: the result of the integral."
    }
  ],
  "code": "from flojoy import flojoy, OrderedPair, Vector\nimport numpy as np\n\n\ndef trapz(x: np.ndarray, y: np.ndarray):\n    m = [0] * len(x)\n    trapezium = (1 / 2) * (x[1] - x[0]) * (y[1] + y[0])\n    m[1] = trapezium\n\n    for i in range(2, len(x)):\n        trapezium = (1 / 2) * (x[i] - x[i - 1]) * (y[i] + y[i - 1])\n        m[i] = m[i - 1] + trapezium\n\n    return m\n\n\n@flojoy\ndef INTEGRATE(default: OrderedPair | Vector) -> OrderedPair:\n    \"\"\"The INTEGRATE node takes a numpy array, a vector, or a matrix as input and integrates it using the composite trapezoidal rule.\n\n    Inputs\n    ------\n    default : OrderedPair|Vector\n        Input from which we get the two lists we use in the integration.\n\n    Returns\n    -------\n    OrderedPair\n        x: the x-axis of the input.\n        y: the result of the integral.\n    \"\"\"\n\n    match default:\n        case OrderedPair():\n            input_x = default.x\n            input_y = default.y\n        case Vector():\n            input_x = np.arange(len(default.v))\n            input_y = default.v\n\n    if type(input_x) != np.ndarray:\n        raise ValueError(f\"Invalid type for x:{type(input_x)}\")\n    elif type(input_y) != np.ndarray:\n        raise ValueError(f\"Invalid type for y:{type(input_y)}\")\n    elif len(input_x) != len(input_y):\n        raise ValueError(\n            f\"X and Y keys must have the same length got, x:{len(input_x)} y:{len(input_y)}\"\n        )\n\n    integrate = trapz(input_x, input_y)\n\n    return OrderedPair(x=input_x, y=integrate)\n"
}