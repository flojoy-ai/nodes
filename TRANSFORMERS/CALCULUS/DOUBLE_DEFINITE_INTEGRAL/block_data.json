{
  "description": "It then computes a double integral of the given function.\n\nExample of proper syntax for the function input:\n2*x*y\n\nExample of improper syntax for the function input:\n2xy",
  "parameters": [
    {
      "name": "function",
      "type": "str",
      "description": "The function that we are integrating."
    },
    {
      "name": "upper_bound_x",
      "type": "float",
      "description": "The upper bound for x."
    },
    {
      "name": "lower_bound_x",
      "type": "float",
      "description": "The lower bound for x."
    },
    {
      "name": "upper_bound_y",
      "type": "float",
      "description": "The upper bound for y."
    },
    {
      "name": "lower_bound_y",
      "type": "float",
      "description": "The lower bound for y."
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "Scalar",
      "description": "The result of the double definite integral."
    }
  ],
  "code": "from flojoy import flojoy, Scalar\nfrom scipy import integrate\nfrom sympy import parse_expr, lambdify\n\n\n@flojoy(deps={\"sympy\": \"1.12\"})\ndef DOUBLE_DEFINITE_INTEGRAL(\n    function: str = \"\",\n    upper_bound_x: float = 0.0,\n    lower_bound_x: float = 0.0,\n    upper_bound_y: float = 0.0,\n    lower_bound_y: float = 0.0,\n) -> Scalar:\n    \"\"\"The DOUBLE_DEFINITE_INTEGRAL node takes a function, upper, and lower bounds as input.\n\n    It then computes a double integral of the given function.\n\n    Example of proper syntax for the function input:\n    2*x*y\n\n    Example of improper syntax for the function input:\n    2xy\n\n    Parameters\n    ----------\n    function : str\n        The function that we are integrating.\n    upper_bound_x : float\n        The upper bound for x.\n    lower_bound_x : float\n        The lower bound for x.\n    upper_bound_y : float\n        The upper bound for y.\n    lower_bound_y : float\n        The lower bound for y.\n\n    Returns\n    -------\n    Scalar\n        The result of the double definite integral.\n    \"\"\"\n\n    func = parse_expr(function)\n    symbols = tuple(func.free_symbols)\n\n    f = lambdify(symbols, func)\n\n    result = integrate.nquad(\n        f, [(lower_bound_x, upper_bound_x), (lower_bound_y, upper_bound_y)]\n    )[0]\n\n    return Scalar(c=result)\n"
}