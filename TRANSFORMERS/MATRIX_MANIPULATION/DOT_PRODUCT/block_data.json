{
  "description": "To multiply a scalar, use the MULTIPLY node.\n\nInputs\n------\na : Matrix\n    The input matrix to be multiplied to input b.\nb : Matrix\n    The input matrix to be multiplied to input a.",
  "parameters": [],
  "returns": [
    {
      "name": null,
      "type": "Matrix",
      "description": "The matrix result from the matrix multiplication."
    }
  ],
  "code": "import numpy as np\nfrom flojoy import flojoy, Vector, Matrix, Scalar\nfrom typing import Union\n\n\n@flojoy\ndef DOT_PRODUCT(a: Matrix | Vector, b: Matrix | Vector) -> Matrix | Vector | Scalar:\n    \"\"\"The DOT_PRODUCT node takes two input matrices, multiplies them (by dot product), and returns the result.\n\n    To multiply a scalar, use the MULTIPLY node.\n\n    Inputs\n    ------\n    a : Matrix\n        The input matrix to be multiplied to input b.\n    b : Matrix\n        The input matrix to be multiplied to input a.\n\n    Returns\n    -------\n    Matrix\n        The matrix result from the matrix multiplication.\n    \"\"\"\n\n    if isinstance(a, Vector) and isinstance(b, Vector):\n        assert a.v.shape == b.v.shape, \"Vector sizes must be equal.\"\n        return Scalar(c=np.dot(a.v, b.v))\n    elif isinstance(a, Matrix) and isinstance(b, Vector):\n        assert (\n            a.m.shape[0] == b.v.shape[0]\n        ), \"Vector size must be equal to Matrix column size.\"\n        return Vector(v=np.dot(a.m, b.v))\n    elif isinstance(a, Vector) and isinstance(b, Matrix):\n        assert (\n            a.v.shape[0] == b.m.shape[0]\n        ), \"Vector size must be equal to Matrix column size.\"\n        return Vector(v=np.dot(a.v, b.m))\n    elif isinstance(a, Matrix) and isinstance(b, Matrix):\n        assert (\n            a.m.shape[1] == b.m.shape[0]\n        ), \"Matrix 1 row length must be equal to Matrix 2 column length.\"\n        return Matrix(m=np.dot(a.m, b.m))\n"
}