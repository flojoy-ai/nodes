{
  "description": "Inputs\n------\nv : Vector\n    The input vector to delete from",
  "parameters": [
    {
      "name": "indices",
      "type": "Array",
      "description": "specified indices to delete value(s) at from the input vector"
    },
    {
      "name": "length",
      "type": "int",
      "description": "number of elements to delete from the input vector, default is 1 (this only applies when one index is specified for indices parameter)"
    }
  ],
  "returns": [
    {
      "name": null,
      "type": "Vector",
      "description": "The new vector with element(s) deleted from the input vector"
    }
  ],
  "code": "from numpy import any, array, delete, arange\nfrom flojoy import flojoy, Vector, Array\n\n\n@flojoy\ndef VECTOR_DELETE(default: Vector, indices: Array, length: int = 1) -> Vector:\n    \"\"\"The VECTOR_DELETE node returns a new Vector with elements deleted from requested indices\n\n    Inputs\n    ------\n    v : Vector\n        The input vector to delete from\n\n    Parameters\n    ----------\n    indices: Array\n        specified indices to delete value(s) at from the input vector\n\n    length: int\n        number of elements to delete from the input vector, default is 1 (this only applies when one index is specified for indices parameter)\n\n    Returns\n    -------\n    Vector\n        The new vector with element(s) deleted from the input vector\n    \"\"\"\n\n    # unwrap the indices first\n    indices = array(indices.unwrap(), dtype=int)\n\n    assert len(default.v) > len(\n        indices\n    ), \"The length of indices parameter must be less than the length of the Vector.\"\n    assert any(indices >= 0), \"The indices must be greater than zero.\"\n\n    if len(indices) == 1:\n        assert (indices[0] + (length - 1)) < len(\n            default.v\n        ), \"The length of items to delete starting from index parameter must not exceed the length of the Vector.\"\n\n    if len(indices) > 1:\n        v = delete(default.v, indices, None)\n    else:\n        indices = arange(indices[0], length)\n        v = delete(default.v, indices, None)\n    return Vector(v=v)\n"
}