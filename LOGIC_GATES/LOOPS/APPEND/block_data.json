{
  "description": "The large array must be passed to the bottom \"array\" connection.\n\nFor ordered pair, the single point must have a shape of 1 (or (1,)).\n\nInputs\n------\nprimary_dp : OrderedPair|Vector|Scalar|Matrix|DataFrame\n    Input that ends up \"on top\" of the resulting DataContainer.\nsecondary_dp : OrderedPair|Vector|Scalar|Matrix|DataFrame\n    Input that ends up \"on the bottom\" of the resulting DataContainer.",
  "parameters": [],
  "returns": [
    {
      "name": null,
      "type": "OrderedPair, Matrix, DataFrame, Vector",
      "description": null
    }
  ],
  "code": "from numpy import append\nfrom flojoy import flojoy, OrderedPair, Matrix, DataFrame, Vector, Scalar\n\n\n@flojoy\ndef APPEND(\n    primary_dp: OrderedPair | Matrix | DataFrame | Scalar | Vector,\n    secondary_dp: OrderedPair | Matrix | DataFrame | Scalar | Vector,\n) -> OrderedPair | Matrix | DataFrame | Vector:\n    \"\"\"The APPEND node appends a single data point to an array.\n\n    The large array must be passed to the bottom \"array\" connection.\n\n    For ordered pair, the single point must have a shape of 1 (or (1,)).\n\n    Inputs\n    ------\n    primary_dp : OrderedPair|Vector|Scalar|Matrix|DataFrame\n        Input that ends up \"on top\" of the resulting DataContainer.\n    secondary_dp : OrderedPair|Vector|Scalar|Matrix|DataFrame\n        Input that ends up \"on the bottom\" of the resulting DataContainer.\n\n    Returns\n    -------\n    OrderedPair, Matrix, DataFrame, Vector\n    \"\"\"\n\n    if isinstance(primary_dp, OrderedPair) and isinstance(secondary_dp, OrderedPair):\n        x0 = primary_dp.x\n        y0 = primary_dp.y\n\n        x1 = secondary_dp.x\n        y1 = secondary_dp.y\n\n        if y1.shape[0] != 1:\n            raise ValueError(\n                (\n                    \"To append, APPEND node the requires the non-array \"\n                    \"input to have a single point. \"\n                    f\"The data passed has a shape of: {y1.shape}\"\n                )\n            )\n\n        x = append(x0, x1)\n        y = append(y0, y1)\n        return OrderedPair(x=x, y=y)\n\n    elif isinstance(primary_dp, Matrix) and isinstance(secondary_dp, Matrix):\n        m0 = primary_dp.m\n        m1 = secondary_dp.m\n\n        m = append(m0, m1, axis=0)\n        return Matrix(m=m)\n\n    elif isinstance(primary_dp, Vector) and isinstance(secondary_dp, Vector):\n        v0 = primary_dp.v\n        v1 = secondary_dp.v\n\n        v = append(v0, v1, axis=0)\n        return Vector(v=v)\n\n    elif isinstance(primary_dp, Vector) and isinstance(secondary_dp, Scalar):\n        v0 = primary_dp.v\n        v1 = secondary_dp.c\n\n        v = append(v0, [v1], axis=0)\n        return Vector(v=v)\n\n    elif isinstance(primary_dp, Scalar) and isinstance(secondary_dp, Scalar):\n        c0 = primary_dp.c\n        c1 = secondary_dp.c\n\n        v = append([c0], [c1], axis=0)\n        return Vector(v=v)\n\n    else:\n        raise ValueError(\n            (\n                \"The APPEND node requires the two inputs to be the same type. \"\n                f\"The types passed were: {type(primary_dp)} and {type(secondary_dp)}\"\n            )\n        )\n"
}