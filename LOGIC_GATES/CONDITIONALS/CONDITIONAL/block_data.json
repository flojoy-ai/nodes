{
  "description": "We are planning to add support for more DataContainer types in the future.\n\nIt then enqueues nodes connected with a \"true\" or \"false\" output based on the comparison result.",
  "parameters": [
    {
      "name": "operator_type",
      "type": "select",
      "description": "Specifies the type of comparison to be performed between the two inputs. The default value is \">=\"."
    }
  ],
  "returns": [],
  "code": "from typing import Any, Literal, TypedDict\n\nfrom flojoy import JobResultBuilder, Scalar, flojoy\n\n\nclass ConditionalOutput(TypedDict):\n    true: Any\n    false: Any\n\n\n@flojoy\ndef CONDITIONAL(\n    x: Scalar,\n    y: Scalar,\n    operator_type: Literal[\"<=\", \">\", \"<\", \">=\", \"!=\", \"==\"] = \">=\",\n) -> ConditionalOutput:\n    \"\"\"The CONDITIONAL node is a specialized node that compares two given Scalar inputs.\n\n    We are planning to add support for more DataContainer types in the future.\n\n    It then enqueues nodes connected with a \"true\" or \"false\" output based on the comparison result.\n\n    Parameters\n    ----------\n    operator_type : select\n        Specifies the type of comparison to be performed between the two inputs. The default value is \">=\".\n    \"\"\"\n\n    # y_of_x = x.y\n    # y_of_y = y.y\n\n    bool_ = compare_values(x.c, y.c, operator_type)\n    data = None\n    if bool_:\n        data = x\n    else:\n        data = y\n\n    # if operator_type in [\"<=\", \"<\"]:\n    #     if not bool_:\n    #         data = OrderedPair(x=x.x, y=y.y)\n    #     else:\n    #         data = OrderedPair(x=y.x, y=x.y)\n    # elif bool_:\n    #     data = OrderedPair(x=x.x, y=y.y)\n    # else:\n    #     data = OrderedPair(x=y.x, y=x.y)\n\n    next_direction = str(bool_).lower()\n\n    return ConditionalOutput(\n        true=JobResultBuilder()\n        .from_data(data)\n        .flow_to_directions([next_direction])\n        .build(),\n        false=JobResultBuilder()\n        .from_data(data)\n        .flow_to_directions([next_direction])\n        .build(),\n    )\n\n\ndef compare_values(first_value: Any, second_value: Any, operator: str):\n    bool_: bool = False\n    if operator == \"<=\":\n        bool_ = first_value <= second_value\n    elif operator == \">\":\n        bool_ = first_value > second_value\n    elif operator == \"<\":\n        bool_ = first_value < second_value\n    elif operator == \">=\":\n        bool_ = first_value >= second_value\n    elif operator == \"!=\":\n        bool_ = first_value != second_value\n    else:\n        bool_ = first_value == second_value\n    return bool_\n"
}