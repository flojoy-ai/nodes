{
  "description": "It should be used in conjunction with conditionals to determine when to break the loop.\n\nIt is needed to be able to generate 'while loops' in Flojoy (combined with an 'infinite loop').",
  "parameters": [
    {
      "name": "referred_node",
      "type": "NodeReference",
      "description": "This is the specific instance of a LOOP node that you want to break.\nIt is required to differentiate between multiple LOOPs if they exist\nin the same application."
    },
    {
      "name": "default",
      "type": "DataContainer",
      "description": "This node simply requires an input (most likely from\nthe return of a CONDITIONAL node) so that it is executed."
    }
  ],
  "returns": [],
  "code": "from flojoy import flojoy, DataContainer, SmallMemory, NodeReference\nfrom typing import Optional, Any\n\nmemory_key = \"loop-info\"\n\n\n@flojoy\ndef BREAK(\n    referred_node: NodeReference,\n    default: Optional[DataContainer] = None,\n) -> None:\n    \"\"\"The BREAK node is designed to end the iteration of a loop.\n\n    It should be used in conjunction with conditionals to determine when to break the loop.\n\n    It is needed to be able to generate 'while loops' in Flojoy (combined with an 'infinite loop').\n\n    Parameters\n    ----------\n    referred_node : NodeReference\n        This is the specific instance of a LOOP node that you want to break.\n        It is required to differentiate between multiple LOOPs if they exist\n        in the same application.\n    default : DataContainer\n        This node simply requires an input (most likely from\n        the return of a CONDITIONAL node) so that it is executed.\n    \"\"\"\n\n    # this is the loop ID we want to break\n    original_data: dict[str, Any] = SmallMemory().read_memory(\n        referred_node.ref, memory_key\n    )\n    data = original_data.copy()\n    data[\"num_loop\"] = 1\n    data[\"current_iteration\"] = 1\n    data[\"is_finished\"] = True\n    SmallMemory().write_to_memory(referred_node.ref, memory_key, data)\n    return default\n"
}